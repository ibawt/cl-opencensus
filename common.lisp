
;;;;    opencensus/proto/agent/common/v1/common.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:opencensus.proto.agent.common.v1)
    (make-package '#:opencensus.proto.agent.common.v1 :use nil)))
(in-package #:opencensus.proto.agent.common.v1)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:deftype library-info-language () '(cl:member 0 1 2 3 4 5 6 7 8 9 10))
(cl:export 'library-info-language)

(cl:defconstant +library-info-language-language-unspecified+ 0)
(cl:export '+library-info-language-language-unspecified+)
(cl:defconstant +library-info-language-cpp+ 1)
(cl:export '+library-info-language-cpp+)
(cl:defconstant +library-info-language-c-sharp+ 2)
(cl:export '+library-info-language-c-sharp+)
(cl:defconstant +library-info-language-erlang+ 3)
(cl:export '+library-info-language-erlang+)
(cl:defconstant +library-info-language-go-lang+ 4)
(cl:export '+library-info-language-go-lang+)
(cl:defconstant +library-info-language-java+ 5)
(cl:export '+library-info-language-java+)
(cl:defconstant +library-info-language-node-js+ 6)
(cl:export '+library-info-language-node-js+)
(cl:defconstant +library-info-language-php+ 7)
(cl:export '+library-info-language-php+)
(cl:defconstant +library-info-language-python+ 8)
(cl:export '+library-info-language-python+)
(cl:defconstant +library-info-language-ruby+ 9)
(cl:export '+library-info-language-ruby+)
(cl:defconstant +library-info-language-web-js+ 10)
(cl:export '+library-info-language-web-js+)

(cl:defconstant +minimum-library-info-language+ +library-info-language-language-unspecified+)
(cl:export '+minimum-library-info-language+)
(cl:defconstant +maximum-library-info-language+ +library-info-language-web-js+)
(cl:export '+maximum-library-info-language+)

(cl:defclass node-attributes-entry (pb:protocol-buffer)
  (
  (key
   :accessor key
   :initform (pb:string-field "")
   :type pb::%sf%)
  (value
   :accessor value
   :initform (pb:string-field "")
   :type pb::%sf%)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'node-attributes-entry)

(cl:export 'key)


(cl:defmethod (cl:setf key) :after (x (self node-attributes-entry))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-key)
  (cl:defgeneric has-key (proto)))
(cl:defmethod has-key ((self node-attributes-entry))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-key)

(cl:unless (cl:fboundp 'clear-key)
  (cl:defgeneric clear-key (proto)))
(cl:defmethod clear-key ((self node-attributes-entry))
  (cl:setf (cl:slot-value self 'key) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-key)

(cl:export 'value)


(cl:defmethod (cl:setf value) :after (x (self node-attributes-entry))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-value)
  (cl:defgeneric has-value (proto)))
(cl:defmethod has-value ((self node-attributes-entry))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-value)

(cl:unless (cl:fboundp 'clear-value)
  (cl:defgeneric clear-value (proto)))
(cl:defmethod clear-value ((self node-attributes-entry))
  (cl:setf (cl:slot-value self 'value) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-value)



(cl:defclass node (pb:protocol-buffer)
  (
  (identifier
   :writer (cl:setf identifier)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.agent.common.v1::process-identifier))
  (library-info
   :writer (cl:setf library-info)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.agent.common.v1::library-info))
  (service-info
   :writer (cl:setf service-info)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.agent.common.v1::service-info))
  (attributes
   :accessor attributes
   :initform (cl:make-array
              0
              :element-type 'opencensus.proto.agent.common.v1::node-attributes-entry
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector opencensus.proto.agent.common.v1::node-attributes-entry))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 4))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'node)

(cl:export 'identifier)

(cl:unless (cl:fboundp 'identifier)
  (cl:defgeneric identifier (proto)))
(cl:defmethod identifier ((self node))
  (cl:let ((result (cl:slot-value self 'identifier)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.agent.common.v1::process-identifier))
      (cl:setf (cl:slot-value self 'identifier) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf identifier) :after (x (self node))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-identifier)
  (cl:defgeneric has-identifier (proto)))
(cl:defmethod has-identifier ((self node))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-identifier)

(cl:unless (cl:fboundp 'clear-identifier)
  (cl:defgeneric clear-identifier (proto)))
(cl:defmethod clear-identifier ((self node))
  (cl:setf (cl:slot-value self 'identifier) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-identifier)

(cl:export 'library-info)

(cl:unless (cl:fboundp 'library-info)
  (cl:defgeneric library-info (proto)))
(cl:defmethod library-info ((self node))
  (cl:let ((result (cl:slot-value self 'library-info)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.agent.common.v1::library-info))
      (cl:setf (cl:slot-value self 'library-info) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf library-info) :after (x (self node))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-library-info)
  (cl:defgeneric has-library-info (proto)))
(cl:defmethod has-library-info ((self node))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-library-info)

(cl:unless (cl:fboundp 'clear-library-info)
  (cl:defgeneric clear-library-info (proto)))
(cl:defmethod clear-library-info ((self node))
  (cl:setf (cl:slot-value self 'library-info) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-library-info)

(cl:export 'service-info)

(cl:unless (cl:fboundp 'service-info)
  (cl:defgeneric service-info (proto)))
(cl:defmethod service-info ((self node))
  (cl:let ((result (cl:slot-value self 'service-info)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.agent.common.v1::service-info))
      (cl:setf (cl:slot-value self 'service-info) result))
      (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf service-info) :after (x (self node))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-service-info)
  (cl:defgeneric has-service-info (proto)))
(cl:defmethod has-service-info ((self node))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-service-info)

(cl:unless (cl:fboundp 'clear-service-info)
  (cl:defgeneric clear-service-info (proto)))
(cl:defmethod clear-service-info ((self node))
  (cl:setf (cl:slot-value self 'service-info) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-service-info)

(cl:export 'attributes)

(cl:unless (cl:fboundp 'clear-attributes)
  (cl:defgeneric clear-attributes (proto)))
(cl:defmethod clear-attributes ((self node))
  (cl:setf (cl:slot-value self 'attributes)
           (cl:make-array 0 :element-type 'opencensus.proto.agent.common.v1::node-attributes-entry
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-attributes)


(cl:defmethod cl:print-object ((self node-attributes-entry) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_key: ~s" (key self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_value: ~s" (value self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self node-attributes-entry))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'key) (pb:string-field "")))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'value) (pb:string-field "")))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self node-attributes-entry))
  cl:t)

(cl:defmethod pb:octet-size ((self node-attributes-entry))
  (cl:let ((size 0))
    ;; string key = 1[json_name = "key"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'key))))
        (cl:+ s (varint:length32 s)))))
    ;; string value = 2[json_name = "value"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'value))))
        (cl:+ s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self node-attributes-entry) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string key = 1[json_name = "key"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'key) 'pb::%octets%))))
  ;; string value = 2[json_name = "value"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'value) 'pb::%octets%))))
  index)

(cl:defmethod pb:merge-from-array ((self node-attributes-entry) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string key = 1[json_name = "key"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'key) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string value = 2[json_name = "value"];
        ((18)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'value) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self node-attributes-entry) (from node-attributes-entry))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'key) (cl:slot-value from 'key))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'value) (cl:slot-value from 'value))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)



(cl:defmethod cl:print-object ((self node) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_identifier: ~s" (identifier self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_library-info: ~s" (library-info self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_service-info: ~s" (service-info self)))
      (cl:format stream " ~_attributes: ~s" (attributes self))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self node))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'identifier) cl:nil))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'library-info) cl:nil))
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'service-info) cl:nil))
  (cl:setf (cl:slot-value self 'attributes)
           (cl:make-array 0 :element-type 'opencensus.proto.agent.common.v1::node-attributes-entry
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self node))
  cl:t)

(cl:defmethod pb:octet-size ((self node))
  (cl:let ((size 0))
    ;; .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1[json_name = "identifier"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'identifier))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2[json_name = "libraryInfo"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'library-info))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3[json_name = "serviceInfo"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'service-info))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; map<string, string> attributes = 4[json_name = "attributes"];
    (cl:let* ((v (cl:slot-value self 'attributes))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self node) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1[json_name = "identifier"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'identifier) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'identifier) buffer index limit)))
  ;; .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2[json_name = "libraryInfo"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'library-info) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'library-info) buffer index limit)))
  ;; .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3[json_name = "serviceInfo"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'service-info) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'service-info) buffer index limit)))
  ;; map<string, string> attributes = 4[json_name = "attributes"];
  (cl:let* ((v (cl:slot-value self 'attributes))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 34))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  index)

(cl:defmethod pb:merge-from-array ((self node) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1[json_name = "identifier"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'identifier)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::process-identifier))
                (cl:setf (cl:slot-value self 'identifier) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2[json_name = "libraryInfo"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'library-info)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::library-info))
                (cl:setf (cl:slot-value self 'library-info) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3[json_name = "serviceInfo"];
        ((26)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'service-info)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::service-info))
                (cl:setf (cl:slot-value self 'service-info) message)
                (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; map<string, string> attributes = 4[json_name = "attributes"];
        ((34)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'opencensus.proto.agent.common.v1::node-attributes-entry)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'attributes)))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self node) (from node))
  (cl:let* ((v (cl:slot-value self 'attributes))
            (vf (cl:slot-value from 'attributes))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'identifier)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::process-identifier))
        (cl:setf (cl:slot-value self 'identifier) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'identifier))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'library-info)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::library-info))
        (cl:setf (cl:slot-value self 'library-info) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'library-info))))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'service-info)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::service-info))
        (cl:setf (cl:slot-value self 'service-info) message)
        (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'service-info))))
)


(cl:defclass process-identifier (pb:protocol-buffer)
  (
  (host-name
   :accessor host-name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (pid
   :accessor pid
   :initform 0
   :type (cl:unsigned-byte 32))
  (start-timestamp
   :writer (cl:setf start-timestamp)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::timestamp))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 3))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'process-identifier)

(cl:export 'host-name)


(cl:defmethod (cl:setf host-name) :after (x (self process-identifier))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-host-name)
  (cl:defgeneric has-host-name (proto)))
(cl:defmethod has-host-name ((self process-identifier))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-host-name)

(cl:unless (cl:fboundp 'clear-host-name)
  (cl:defgeneric clear-host-name (proto)))
(cl:defmethod clear-host-name ((self process-identifier))
  (cl:setf (cl:slot-value self 'host-name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-host-name)

(cl:export 'pid)


(cl:defmethod (cl:setf pid) :after (x (self process-identifier))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-pid)
  (cl:defgeneric has-pid (proto)))
(cl:defmethod has-pid ((self process-identifier))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-pid)

(cl:unless (cl:fboundp 'clear-pid)
  (cl:defgeneric clear-pid (proto)))
(cl:defmethod clear-pid ((self process-identifier))
  (cl:setf (cl:slot-value self 'pid) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-pid)

(cl:export 'start-timestamp)

(cl:unless (cl:fboundp 'start-timestamp)
  (cl:defgeneric start-timestamp (proto)))
(cl:defmethod start-timestamp ((self process-identifier))
  (cl:let ((result (cl:slot-value self 'start-timestamp)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::timestamp))
      (cl:setf (cl:slot-value self 'start-timestamp) result))
      (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf start-timestamp) :after (x (self process-identifier))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-start-timestamp)
  (cl:defgeneric has-start-timestamp (proto)))
(cl:defmethod has-start-timestamp ((self process-identifier))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-start-timestamp)

(cl:unless (cl:fboundp 'clear-start-timestamp)
  (cl:defgeneric clear-start-timestamp (proto)))
(cl:defmethod clear-start-timestamp ((self process-identifier))
  (cl:setf (cl:slot-value self 'start-timestamp) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-start-timestamp)


(cl:defmethod cl:print-object ((self process-identifier) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_host-name: ~s" (host-name self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_pid: ~s" (pid self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_start-timestamp: ~s" (start-timestamp self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self process-identifier))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'host-name) (pb:string-field "")))
  (cl:setf (cl:slot-value self 'pid) 0)
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'start-timestamp) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self process-identifier))
  cl:t)

(cl:defmethod pb:octet-size ((self process-identifier))
  (cl:let ((size 0))
    ;; string host_name = 1[json_name = "hostName"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'host-name))))
        (cl:+ s (varint:length32 s)))))
    ;; uint32 pid = 2[json_name = "pid"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length32 (cl:slot-value self 'pid)))))
    ;; .google.protobuf.Timestamp start_timestamp = 3[json_name = "startTimestamp"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'start-timestamp))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self process-identifier) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string host_name = 1[json_name = "hostName"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'host-name) 'pb::%octets%))))
  ;; uint32 pid = 2[json_name = "pid"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value self 'pid))))
  ;; .google.protobuf.Timestamp start_timestamp = 3[json_name = "startTimestamp"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'start-timestamp) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'start-timestamp) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self process-identifier) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string host_name = 1[json_name = "hostName"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'host-name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; uint32 pid = 2[json_name = "pid"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-uint32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'pid) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .google.protobuf.Timestamp start_timestamp = 3[json_name = "startTimestamp"];
        ((26)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'start-timestamp)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::timestamp))
                (cl:setf (cl:slot-value self 'start-timestamp) message)
                (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self process-identifier) (from process-identifier))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'host-name) (cl:slot-value from 'host-name))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'pid) (cl:slot-value from 'pid))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'start-timestamp)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::timestamp))
        (cl:setf (cl:slot-value self 'start-timestamp) message)
        (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'start-timestamp))))
)


(cl:defclass library-info (pb:protocol-buffer)
  (
  (language
   :accessor language
   :initform opencensus.proto.agent.common.v1::+library-info-language-language-unspecified+
   :type opencensus.proto.agent.common.v1::library-info-language)
  (exporter-version
   :accessor exporter-version
   :initform (pb:string-field "")
   :type pb::%sf%)
  (core-library-version
   :accessor core-library-version
   :initform (pb:string-field "")
   :type pb::%sf%)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 3))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'library-info)

(cl:export 'language)


(cl:defmethod (cl:setf language) :after (x (self library-info))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-language)
  (cl:defgeneric has-language (proto)))
(cl:defmethod has-language ((self library-info))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-language)

(cl:unless (cl:fboundp 'clear-language)
  (cl:defgeneric clear-language (proto)))
(cl:defmethod clear-language ((self library-info))
  (cl:setf (cl:slot-value self 'language) opencensus.proto.agent.common.v1::+library-info-language-language-unspecified+)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-language)

(cl:export 'exporter-version)


(cl:defmethod (cl:setf exporter-version) :after (x (self library-info))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-exporter-version)
  (cl:defgeneric has-exporter-version (proto)))
(cl:defmethod has-exporter-version ((self library-info))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-exporter-version)

(cl:unless (cl:fboundp 'clear-exporter-version)
  (cl:defgeneric clear-exporter-version (proto)))
(cl:defmethod clear-exporter-version ((self library-info))
  (cl:setf (cl:slot-value self 'exporter-version) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-exporter-version)

(cl:export 'core-library-version)


(cl:defmethod (cl:setf core-library-version) :after (x (self library-info))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-core-library-version)
  (cl:defgeneric has-core-library-version (proto)))
(cl:defmethod has-core-library-version ((self library-info))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-core-library-version)

(cl:unless (cl:fboundp 'clear-core-library-version)
  (cl:defgeneric clear-core-library-version (proto)))
(cl:defmethod clear-core-library-version ((self library-info))
  (cl:setf (cl:slot-value self 'core-library-version) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-core-library-version)


(cl:defmethod cl:print-object ((self library-info) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_language: ~s" (language self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_exporter-version: ~s" (exporter-version self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_core-library-version: ~s" (core-library-version self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self library-info))
  (cl:setf (cl:slot-value self 'language) opencensus.proto.agent.common.v1::+library-info-language-language-unspecified+)
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'exporter-version) (pb:string-field "")))
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'core-library-version) (pb:string-field "")))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self library-info))
  cl:t)

(cl:defmethod pb:octet-size ((self library-info))
  (cl:let ((size 0))
    ;; .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1[json_name = "language"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'language)))))
    ;; string exporter_version = 2[json_name = "exporterVersion"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'exporter-version))))
        (cl:+ s (varint:length32 s)))))
    ;; string core_library_version = 3[json_name = "coreLibraryVersion"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'core-library-version))))
        (cl:+ s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self library-info) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1[json_name = "language"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 8))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'language)))))
  ;; string exporter_version = 2[json_name = "exporterVersion"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'exporter-version) 'pb::%octets%))))
  ;; string core_library_version = 3[json_name = "coreLibraryVersion"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'core-library-version) 'pb::%octets%))))
  index)

(cl:defmethod pb:merge-from-array ((self library-info) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1[json_name = "language"];
        ((8)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            ;; XXXXX: when valid, set field, else add to unknown fields
            (cl:setf (cl:slot-value self 'language) value)
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string exporter_version = 2[json_name = "exporterVersion"];
        ((18)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'exporter-version) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string core_library_version = 3[json_name = "coreLibraryVersion"];
        ((26)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'core-library-version) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self library-info) (from library-info))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'language) (cl:slot-value from 'language))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'exporter-version) (cl:slot-value from 'exporter-version))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'core-library-version) (cl:slot-value from 'core-library-version))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
)


(cl:defclass service-info (pb:protocol-buffer)
  (
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 1))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'service-info)

(cl:export 'name)


(cl:defmethod (cl:setf name) :after (x (self service-info))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self service-info))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self service-info))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)


(cl:defmethod cl:print-object ((self service-info) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self service-info))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self service-info))
  cl:t)

(cl:defmethod pb:octet-size ((self service-info))
  (cl:let ((size 0))
    ;; string name = 1[json_name = "name"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self service-info) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string name = 1[json_name = "name"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  index)

(cl:defmethod pb:merge-from-array ((self service-info) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string name = 1[json_name = "name"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self service-info) (from service-info))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
)


