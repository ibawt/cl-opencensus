
;;;;    google/protobuf/type.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:google.protobuf)
    (make-package '#:google.protobuf :use nil)))
(in-package #:google.protobuf)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:deftype syntax () '(cl:member 0 1))
(cl:export 'syntax)

(cl:defconstant +syntax-syntax-proto2+ 0)
(cl:export '+syntax-syntax-proto2+)
(cl:defconstant +syntax-syntax-proto3+ 1)
(cl:export '+syntax-syntax-proto3+)

(cl:defconstant +minimum-syntax+ +syntax-syntax-proto2+)
(cl:export '+minimum-syntax+)
(cl:defconstant +maximum-syntax+ +syntax-syntax-proto3+)
(cl:export '+maximum-syntax+)

(cl:deftype field-kind () '(cl:member 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))
(cl:export 'field-kind)

(cl:defconstant +field-kind-type-unknown+ 0)
(cl:export '+field-kind-type-unknown+)
(cl:defconstant +field-kind-type-double+ 1)
(cl:export '+field-kind-type-double+)
(cl:defconstant +field-kind-type-float+ 2)
(cl:export '+field-kind-type-float+)
(cl:defconstant +field-kind-type-int64+ 3)
(cl:export '+field-kind-type-int64+)
(cl:defconstant +field-kind-type-uint64+ 4)
(cl:export '+field-kind-type-uint64+)
(cl:defconstant +field-kind-type-int32+ 5)
(cl:export '+field-kind-type-int32+)
(cl:defconstant +field-kind-type-fixed64+ 6)
(cl:export '+field-kind-type-fixed64+)
(cl:defconstant +field-kind-type-fixed32+ 7)
(cl:export '+field-kind-type-fixed32+)
(cl:defconstant +field-kind-type-bool+ 8)
(cl:export '+field-kind-type-bool+)
(cl:defconstant +field-kind-type-string+ 9)
(cl:export '+field-kind-type-string+)
(cl:defconstant +field-kind-type-group+ 10)
(cl:export '+field-kind-type-group+)
(cl:defconstant +field-kind-type-message+ 11)
(cl:export '+field-kind-type-message+)
(cl:defconstant +field-kind-type-bytes+ 12)
(cl:export '+field-kind-type-bytes+)
(cl:defconstant +field-kind-type-uint32+ 13)
(cl:export '+field-kind-type-uint32+)
(cl:defconstant +field-kind-type-enum+ 14)
(cl:export '+field-kind-type-enum+)
(cl:defconstant +field-kind-type-sfixed32+ 15)
(cl:export '+field-kind-type-sfixed32+)
(cl:defconstant +field-kind-type-sfixed64+ 16)
(cl:export '+field-kind-type-sfixed64+)
(cl:defconstant +field-kind-type-sint32+ 17)
(cl:export '+field-kind-type-sint32+)
(cl:defconstant +field-kind-type-sint64+ 18)
(cl:export '+field-kind-type-sint64+)

(cl:defconstant +minimum-field-kind+ +field-kind-type-unknown+)
(cl:export '+minimum-field-kind+)
(cl:defconstant +maximum-field-kind+ +field-kind-type-sint64+)
(cl:export '+maximum-field-kind+)

(cl:deftype field-cardinality () '(cl:member 0 1 2 3))
(cl:export 'field-cardinality)

(cl:defconstant +field-cardinality-cardinality-unknown+ 0)
(cl:export '+field-cardinality-cardinality-unknown+)
(cl:defconstant +field-cardinality-cardinality-optional+ 1)
(cl:export '+field-cardinality-cardinality-optional+)
(cl:defconstant +field-cardinality-cardinality-required+ 2)
(cl:export '+field-cardinality-cardinality-required+)
(cl:defconstant +field-cardinality-cardinality-repeated+ 3)
(cl:export '+field-cardinality-cardinality-repeated+)

(cl:defconstant +minimum-field-cardinality+ +field-cardinality-cardinality-unknown+)
(cl:export '+minimum-field-cardinality+)
(cl:defconstant +maximum-field-cardinality+ +field-cardinality-cardinality-repeated+)
(cl:export '+maximum-field-cardinality+)

(cl:defclass type (pb:protocol-buffer)
  (
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (fields
   :accessor fields
   :initform (cl:make-array
              0
              :element-type 'google.protobuf::field
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector google.protobuf::field))
  (oneofs
   :accessor oneofs
   :initform (cl:make-array
              0
              :element-type 'pb::%sf%
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector pb::%sf%))
  (options
   :accessor options
   :initform (cl:make-array
              0
              :element-type 'google.protobuf::option
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector google.protobuf::option))
  (source-context
   :writer (cl:setf source-context)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::source-context))
  (syntax
   :accessor syntax
   :initform google.protobuf::+syntax-syntax-proto2+
   :type google.protobuf::syntax)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 6))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'type)

(cl:export 'name)


(cl:defmethod (cl:setf name) :after (x (self type))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self type))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self type))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)

(cl:export 'fields)

(cl:unless (cl:fboundp 'clear-fields)
  (cl:defgeneric clear-fields (proto)))
(cl:defmethod clear-fields ((self type))
  (cl:setf (cl:slot-value self 'fields)
           (cl:make-array 0 :element-type 'google.protobuf::field
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-fields)

(cl:export 'oneofs)

(cl:unless (cl:fboundp 'clear-oneofs)
  (cl:defgeneric clear-oneofs (proto)))
(cl:defmethod clear-oneofs ((self type))
  (cl:setf (cl:slot-value self 'oneofs)
           (cl:make-array
            0
            :element-type 'pb::%sf%
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-oneofs)

(cl:export 'options)

(cl:unless (cl:fboundp 'clear-options)
  (cl:defgeneric clear-options (proto)))
(cl:defmethod clear-options ((self type))
  (cl:setf (cl:slot-value self 'options)
           (cl:make-array 0 :element-type 'google.protobuf::option
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-options)

(cl:export 'source-context)

(cl:unless (cl:fboundp 'source-context)
  (cl:defgeneric source-context (proto)))
(cl:defmethod source-context ((self type))
  (cl:let ((result (cl:slot-value self 'source-context)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::source-context))
      (cl:setf (cl:slot-value self 'source-context) result))
      (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf source-context) :after (x (self type))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-source-context)
  (cl:defgeneric has-source-context (proto)))
(cl:defmethod has-source-context ((self type))
  (cl:logbitp 4 (cl:slot-value self '%has-bits%)))
(cl:export 'has-source-context)

(cl:unless (cl:fboundp 'clear-source-context)
  (cl:defgeneric clear-source-context (proto)))
(cl:defmethod clear-source-context ((self type))
  (cl:setf (cl:slot-value self 'source-context) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-source-context)

(cl:export 'syntax)


(cl:defmethod (cl:setf syntax) :after (x (self type))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-syntax)
  (cl:defgeneric has-syntax (proto)))
(cl:defmethod has-syntax ((self type))
  (cl:logbitp 5 (cl:slot-value self '%has-bits%)))
(cl:export 'has-syntax)

(cl:unless (cl:fboundp 'clear-syntax)
  (cl:defgeneric clear-syntax (proto)))
(cl:defmethod clear-syntax ((self type))
  (cl:setf (cl:slot-value self 'syntax) google.protobuf::+syntax-syntax-proto2+)
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-syntax)


(cl:defmethod cl:print-object ((self type) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      (cl:format stream " ~_fields: ~s" (fields self))
      (cl:format stream " ~_oneofs: ~s" (oneofs self))
      (cl:format stream " ~_options: ~s" (options self))
      (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_source-context: ~s" (source-context self)))
      (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_syntax: ~s" (syntax self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self type))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'source-context) cl:nil))
  (cl:setf (cl:slot-value self 'syntax) google.protobuf::+syntax-syntax-proto2+)
  (cl:setf (cl:slot-value self 'fields)
           (cl:make-array 0 :element-type 'google.protobuf::field
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self 'oneofs)
           (cl:make-array
            0
            :element-type 'pb::%sf%
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self 'options)
           (cl:make-array 0 :element-type 'google.protobuf::option
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self type))
  cl:t)

(cl:defmethod pb:octet-size ((self type))
  (cl:let ((size 0))
    ;; string name = 1[json_name = "name"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    ;; .google.protobuf.SourceContext source_context = 5[json_name = "sourceContext"];
    (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'source-context))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .google.protobuf.Syntax syntax = 6[json_name = "syntax"];
    (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'syntax)))))
    ;; repeated .google.protobuf.Field fields = 2[json_name = "fields"];
    (cl:let* ((v (cl:slot-value self 'fields))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    ;; repeated string oneofs = 3[json_name = "oneofs"];
    (cl:let* ((x (cl:slot-value self 'oneofs))
              (length (cl:length x)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:aref x i))))
  (cl:+ s (varint:length32 s))))))
    ;; repeated .google.protobuf.Option options = 4[json_name = "options"];
    (cl:let* ((v (cl:slot-value self 'options))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self type) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string name = 1[json_name = "name"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  ;; repeated .google.protobuf.Field fields = 2[json_name = "fields"];
  (cl:let* ((v (cl:slot-value self 'fields))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; repeated string oneofs = 3[json_name = "oneofs"];
  (cl:let* ((v (cl:slot-value self 'oneofs))
            (length (cl:length v)))
    (cl:dotimes (i length)
      (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
      (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%octets%)))))
  ;; repeated .google.protobuf.Option options = 4[json_name = "options"];
  (cl:let* ((v (cl:slot-value self 'options))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 34))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; .google.protobuf.SourceContext source_context = 5[json_name = "sourceContext"];
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 42))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'source-context) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'source-context) buffer index limit)))
  ;; .google.protobuf.Syntax syntax = 6[json_name = "syntax"];
  (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 48))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'syntax)))))
  index)

(cl:defmethod pb:merge-from-array ((self type) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string name = 1[json_name = "name"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; repeated .google.protobuf.Field fields = 2[json_name = "fields"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'google.protobuf::field)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'fields)))))
        ;; repeated string oneofs = 3[json_name = "oneofs"];
        ((26)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:vector-push-extend (pb:string-field value) (cl:slot-value self 'oneofs))
            (cl:setf index new-index)))
        ;; repeated .google.protobuf.Option options = 4[json_name = "options"];
        ((34)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'google.protobuf::option)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'options)))))
        ;; .google.protobuf.SourceContext source_context = 5[json_name = "sourceContext"];
        ((42)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'source-context)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::source-context))
                (cl:setf (cl:slot-value self 'source-context) message)
                (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .google.protobuf.Syntax syntax = 6[json_name = "syntax"];
        ((48)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            ;; XXXXX: when valid, set field, else add to unknown fields
            (cl:setf (cl:slot-value self 'syntax) value)
            (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self type) (from type))
  (cl:let* ((v (cl:slot-value self 'fields))
            (vf (cl:slot-value from 'fields))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:let ((v (cl:slot-value self 'oneofs))
           (vf (cl:slot-value from 'oneofs)))
    (cl:dotimes (i (cl:length vf))
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:let* ((v (cl:slot-value self 'options))
            (vf (cl:slot-value from 'options))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 4 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'source-context)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::source-context))
        (cl:setf (cl:slot-value self 'source-context) message)
        (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'source-context))))
  (cl:when (cl:logbitp 5 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'syntax) (cl:slot-value from 'syntax))
    (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))
)


(cl:defclass field (pb:protocol-buffer)
  (
  (kind
   :accessor kind
   :initform google.protobuf::+field-kind-type-unknown+
   :type google.protobuf::field-kind)
  (cardinality
   :accessor cardinality
   :initform google.protobuf::+field-cardinality-cardinality-unknown+
   :type google.protobuf::field-cardinality)
  (number
   :accessor number
   :initform 0
   :type (cl:signed-byte 32))
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (type-url
   :accessor type-url
   :initform (pb:string-field "")
   :type pb::%sf%)
  (oneof-index
   :accessor oneof-index
   :initform 0
   :type (cl:signed-byte 32))
  (packed
   :accessor packed
   :initform cl:nil
   :type cl:boolean)
  (options
   :accessor options
   :initform (cl:make-array
              0
              :element-type 'google.protobuf::option
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector google.protobuf::option))
  (json-name
   :accessor json-name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (default-value
   :accessor default-value
   :initform (pb:string-field "")
   :type pb::%sf%)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 10))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'field)

(cl:export 'kind)


(cl:defmethod (cl:setf kind) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-kind)
  (cl:defgeneric has-kind (proto)))
(cl:defmethod has-kind ((self field))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-kind)

(cl:unless (cl:fboundp 'clear-kind)
  (cl:defgeneric clear-kind (proto)))
(cl:defmethod clear-kind ((self field))
  (cl:setf (cl:slot-value self 'kind) google.protobuf::+field-kind-type-unknown+)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-kind)

(cl:export 'cardinality)


(cl:defmethod (cl:setf cardinality) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-cardinality)
  (cl:defgeneric has-cardinality (proto)))
(cl:defmethod has-cardinality ((self field))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-cardinality)

(cl:unless (cl:fboundp 'clear-cardinality)
  (cl:defgeneric clear-cardinality (proto)))
(cl:defmethod clear-cardinality ((self field))
  (cl:setf (cl:slot-value self 'cardinality) google.protobuf::+field-cardinality-cardinality-unknown+)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-cardinality)

(cl:export 'number)


(cl:defmethod (cl:setf number) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-number)
  (cl:defgeneric has-number (proto)))
(cl:defmethod has-number ((self field))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-number)

(cl:unless (cl:fboundp 'clear-number)
  (cl:defgeneric clear-number (proto)))
(cl:defmethod clear-number ((self field))
  (cl:setf (cl:slot-value self 'number) 0)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-number)

(cl:export 'name)


(cl:defmethod (cl:setf name) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self field))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self field))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)

(cl:export 'type-url)


(cl:defmethod (cl:setf type-url) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-type-url)
  (cl:defgeneric has-type-url (proto)))
(cl:defmethod has-type-url ((self field))
  (cl:logbitp 4 (cl:slot-value self '%has-bits%)))
(cl:export 'has-type-url)

(cl:unless (cl:fboundp 'clear-type-url)
  (cl:defgeneric clear-type-url (proto)))
(cl:defmethod clear-type-url ((self field))
  (cl:setf (cl:slot-value self 'type-url) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-type-url)

(cl:export 'oneof-index)


(cl:defmethod (cl:setf oneof-index) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-oneof-index)
  (cl:defgeneric has-oneof-index (proto)))
(cl:defmethod has-oneof-index ((self field))
  (cl:logbitp 5 (cl:slot-value self '%has-bits%)))
(cl:export 'has-oneof-index)

(cl:unless (cl:fboundp 'clear-oneof-index)
  (cl:defgeneric clear-oneof-index (proto)))
(cl:defmethod clear-oneof-index ((self field))
  (cl:setf (cl:slot-value self 'oneof-index) 0)
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-oneof-index)

(cl:export 'packed)


(cl:defmethod (cl:setf packed) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-packed)
  (cl:defgeneric has-packed (proto)))
(cl:defmethod has-packed ((self field))
  (cl:logbitp 6 (cl:slot-value self '%has-bits%)))
(cl:export 'has-packed)

(cl:unless (cl:fboundp 'clear-packed)
  (cl:defgeneric clear-packed (proto)))
(cl:defmethod clear-packed ((self field))
  (cl:setf (cl:slot-value self 'packed) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-packed)

(cl:export 'options)

(cl:unless (cl:fboundp 'clear-options)
  (cl:defgeneric clear-options (proto)))
(cl:defmethod clear-options ((self field))
  (cl:setf (cl:slot-value self 'options)
           (cl:make-array 0 :element-type 'google.protobuf::option
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-options)

(cl:export 'json-name)


(cl:defmethod (cl:setf json-name) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-json-name)
  (cl:defgeneric has-json-name (proto)))
(cl:defmethod has-json-name ((self field))
  (cl:logbitp 8 (cl:slot-value self '%has-bits%)))
(cl:export 'has-json-name)

(cl:unless (cl:fboundp 'clear-json-name)
  (cl:defgeneric clear-json-name (proto)))
(cl:defmethod clear-json-name ((self field))
  (cl:setf (cl:slot-value self 'json-name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-json-name)

(cl:export 'default-value)


(cl:defmethod (cl:setf default-value) :after (x (self field))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-default-value)
  (cl:defgeneric has-default-value (proto)))
(cl:defmethod has-default-value ((self field))
  (cl:logbitp 9 (cl:slot-value self '%has-bits%)))
(cl:export 'has-default-value)

(cl:unless (cl:fboundp 'clear-default-value)
  (cl:defgeneric clear-default-value (proto)))
(cl:defmethod clear-default-value ((self field))
  (cl:setf (cl:slot-value self 'default-value) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-default-value)


(cl:defmethod cl:print-object ((self field) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_kind: ~s" (kind self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_cardinality: ~s" (cardinality self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_number: ~s" (number self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_type-url: ~s" (type-url self)))
      (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_oneof-index: ~s" (oneof-index self)))
      (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_packed: ~s" (packed self)))
      (cl:format stream " ~_options: ~s" (options self))
      (cl:when (cl:logbitp 8 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_json-name: ~s" (json-name self)))
      (cl:when (cl:logbitp 9 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_default-value: ~s" (default-value self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self field))
  (cl:setf (cl:slot-value self 'kind) google.protobuf::+field-kind-type-unknown+)
  (cl:setf (cl:slot-value self 'cardinality) google.protobuf::+field-cardinality-cardinality-unknown+)
  (cl:setf (cl:slot-value self 'number) 0)
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'type-url) (pb:string-field "")))
  (cl:setf (cl:slot-value self 'oneof-index) 0)
  (cl:setf (cl:slot-value self 'packed) cl:nil)
  (cl:when (cl:logbitp 8 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'json-name) (pb:string-field "")))
  (cl:when (cl:logbitp 9 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'default-value) (pb:string-field "")))
  (cl:setf (cl:slot-value self 'options)
           (cl:make-array 0 :element-type 'google.protobuf::option
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self field))
  cl:t)

(cl:defmethod pb:octet-size ((self field))
  (cl:let ((size 0))
    ;; .google.protobuf.Field.Kind kind = 1[json_name = "kind"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'kind)))))
    ;; .google.protobuf.Field.Cardinality cardinality = 2[json_name = "cardinality"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'cardinality)))))
    ;; int32 number = 3[json_name = "number"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'number))))))
    ;; string name = 4[json_name = "name"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    ;; string type_url = 6[json_name = "typeUrl"];
    (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'type-url))))
        (cl:+ s (varint:length32 s)))))
    ;; int32 oneof_index = 7[json_name = "oneofIndex"];
    (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'oneof-index))))))
    ;; bool packed = 8[json_name = "packed"];
    (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 1)))
    ;; string json_name = 10[json_name = "jsonName"];
    (cl:when (cl:logbitp 8 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'json-name))))
        (cl:+ s (varint:length32 s)))))
    ;; string default_value = 11[json_name = "defaultValue"];
    (cl:when (cl:logbitp 9 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'default-value))))
        (cl:+ s (varint:length32 s)))))
    ;; repeated .google.protobuf.Option options = 9[json_name = "options"];
    (cl:let* ((v (cl:slot-value self 'options))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self field) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .google.protobuf.Field.Kind kind = 1[json_name = "kind"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 8))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'kind)))))
  ;; .google.protobuf.Field.Cardinality cardinality = 2[json_name = "cardinality"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'cardinality)))))
  ;; int32 number = 3[json_name = "number"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 24))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'number)))))
  ;; string name = 4[json_name = "name"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 34))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  ;; string type_url = 6[json_name = "typeUrl"];
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 50))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'type-url) 'pb::%octets%))))
  ;; int32 oneof_index = 7[json_name = "oneofIndex"];
  (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 56))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'oneof-index)))))
  ;; bool packed = 8[json_name = "packed"];
  (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 64))
    (cl:setf index (wire-format:write-boolean-carefully buffer index limit (cl:slot-value self 'packed))))
  ;; repeated .google.protobuf.Option options = 9[json_name = "options"];
  (cl:let* ((v (cl:slot-value self 'options))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 74))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; string json_name = 10[json_name = "jsonName"];
  (cl:when (cl:logbitp 8 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 82))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'json-name) 'pb::%octets%))))
  ;; string default_value = 11[json_name = "defaultValue"];
  (cl:when (cl:logbitp 9 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 90))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'default-value) 'pb::%octets%))))
  index)

(cl:defmethod pb:merge-from-array ((self field) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .google.protobuf.Field.Kind kind = 1[json_name = "kind"];
        ((8)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            ;; XXXXX: when valid, set field, else add to unknown fields
            (cl:setf (cl:slot-value self 'kind) value)
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .google.protobuf.Field.Cardinality cardinality = 2[json_name = "cardinality"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            ;; XXXXX: when valid, set field, else add to unknown fields
            (cl:setf (cl:slot-value self 'cardinality) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; int32 number = 3[json_name = "number"];
        ((24)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'number) value)
            (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string name = 4[json_name = "name"];
        ((34)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string type_url = 6[json_name = "typeUrl"];
        ((50)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'type-url) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; int32 oneof_index = 7[json_name = "oneofIndex"];
        ((56)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'oneof-index) value)
            (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; bool packed = 8[json_name = "packed"];
        ((64)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-boolean-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'packed) value)
            (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; repeated .google.protobuf.Option options = 9[json_name = "options"];
        ((74)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'google.protobuf::option)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'options)))))
        ;; string json_name = 10[json_name = "jsonName"];
        ((82)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'json-name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string default_value = 11[json_name = "defaultValue"];
        ((90)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'default-value) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self field) (from field))
  (cl:let* ((v (cl:slot-value self 'options))
            (vf (cl:slot-value from 'options))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'kind) (cl:slot-value from 'kind))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'cardinality) (cl:slot-value from 'cardinality))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'number) (cl:slot-value from 'number))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 4 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'type-url) (cl:slot-value from 'type-url))
    (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 5 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'oneof-index) (cl:slot-value from 'oneof-index))
    (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 6 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'packed) (cl:slot-value from 'packed))
    (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 8 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'json-name) (cl:slot-value from 'json-name))
    (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 9 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'default-value) (cl:slot-value from 'default-value))
    (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 1))
)


(cl:defclass enum (pb:protocol-buffer)
  (
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (enumvalue
   :accessor enumvalue
   :initform (cl:make-array
              0
              :element-type 'google.protobuf::enum-value
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector google.protobuf::enum-value))
  (options
   :accessor options
   :initform (cl:make-array
              0
              :element-type 'google.protobuf::option
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector google.protobuf::option))
  (source-context
   :writer (cl:setf source-context)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::source-context))
  (syntax
   :accessor syntax
   :initform google.protobuf::+syntax-syntax-proto2+
   :type google.protobuf::syntax)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 5))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'enum)

(cl:export 'name)


(cl:defmethod (cl:setf name) :after (x (self enum))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self enum))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self enum))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)

(cl:export 'enumvalue)

(cl:unless (cl:fboundp 'clear-enumvalue)
  (cl:defgeneric clear-enumvalue (proto)))
(cl:defmethod clear-enumvalue ((self enum))
  (cl:setf (cl:slot-value self 'enumvalue)
           (cl:make-array 0 :element-type 'google.protobuf::enum-value
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-enumvalue)

(cl:export 'options)

(cl:unless (cl:fboundp 'clear-options)
  (cl:defgeneric clear-options (proto)))
(cl:defmethod clear-options ((self enum))
  (cl:setf (cl:slot-value self 'options)
           (cl:make-array 0 :element-type 'google.protobuf::option
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-options)

(cl:export 'source-context)

(cl:unless (cl:fboundp 'source-context)
  (cl:defgeneric source-context (proto)))
(cl:defmethod source-context ((self enum))
  (cl:let ((result (cl:slot-value self 'source-context)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::source-context))
      (cl:setf (cl:slot-value self 'source-context) result))
      (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf source-context) :after (x (self enum))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-source-context)
  (cl:defgeneric has-source-context (proto)))
(cl:defmethod has-source-context ((self enum))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-source-context)

(cl:unless (cl:fboundp 'clear-source-context)
  (cl:defgeneric clear-source-context (proto)))
(cl:defmethod clear-source-context ((self enum))
  (cl:setf (cl:slot-value self 'source-context) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-source-context)

(cl:export 'syntax)


(cl:defmethod (cl:setf syntax) :after (x (self enum))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-syntax)
  (cl:defgeneric has-syntax (proto)))
(cl:defmethod has-syntax ((self enum))
  (cl:logbitp 4 (cl:slot-value self '%has-bits%)))
(cl:export 'has-syntax)

(cl:unless (cl:fboundp 'clear-syntax)
  (cl:defgeneric clear-syntax (proto)))
(cl:defmethod clear-syntax ((self enum))
  (cl:setf (cl:slot-value self 'syntax) google.protobuf::+syntax-syntax-proto2+)
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-syntax)


(cl:defmethod cl:print-object ((self enum) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      (cl:format stream " ~_enumvalue: ~s" (enumvalue self))
      (cl:format stream " ~_options: ~s" (options self))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_source-context: ~s" (source-context self)))
      (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_syntax: ~s" (syntax self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self enum))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'source-context) cl:nil))
  (cl:setf (cl:slot-value self 'syntax) google.protobuf::+syntax-syntax-proto2+)
  (cl:setf (cl:slot-value self 'enumvalue)
           (cl:make-array 0 :element-type 'google.protobuf::enum-value
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self 'options)
           (cl:make-array 0 :element-type 'google.protobuf::option
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self enum))
  cl:t)

(cl:defmethod pb:octet-size ((self enum))
  (cl:let ((size 0))
    ;; string name = 1[json_name = "name"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    ;; .google.protobuf.SourceContext source_context = 4[json_name = "sourceContext"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'source-context))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .google.protobuf.Syntax syntax = 5[json_name = "syntax"];
    (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'syntax)))))
    ;; repeated .google.protobuf.EnumValue enumvalue = 2[json_name = "enumvalue"];
    (cl:let* ((v (cl:slot-value self 'enumvalue))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    ;; repeated .google.protobuf.Option options = 3[json_name = "options"];
    (cl:let* ((v (cl:slot-value self 'options))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self enum) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string name = 1[json_name = "name"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  ;; repeated .google.protobuf.EnumValue enumvalue = 2[json_name = "enumvalue"];
  (cl:let* ((v (cl:slot-value self 'enumvalue))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; repeated .google.protobuf.Option options = 3[json_name = "options"];
  (cl:let* ((v (cl:slot-value self 'options))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; .google.protobuf.SourceContext source_context = 4[json_name = "sourceContext"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 34))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'source-context) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'source-context) buffer index limit)))
  ;; .google.protobuf.Syntax syntax = 5[json_name = "syntax"];
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 40))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'syntax)))))
  index)

(cl:defmethod pb:merge-from-array ((self enum) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string name = 1[json_name = "name"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; repeated .google.protobuf.EnumValue enumvalue = 2[json_name = "enumvalue"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'google.protobuf::enum-value)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'enumvalue)))))
        ;; repeated .google.protobuf.Option options = 3[json_name = "options"];
        ((26)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'google.protobuf::option)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'options)))))
        ;; .google.protobuf.SourceContext source_context = 4[json_name = "sourceContext"];
        ((34)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'source-context)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::source-context))
                (cl:setf (cl:slot-value self 'source-context) message)
                (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .google.protobuf.Syntax syntax = 5[json_name = "syntax"];
        ((40)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            ;; XXXXX: when valid, set field, else add to unknown fields
            (cl:setf (cl:slot-value self 'syntax) value)
            (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self enum) (from enum))
  (cl:let* ((v (cl:slot-value self 'enumvalue))
            (vf (cl:slot-value from 'enumvalue))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:let* ((v (cl:slot-value self 'options))
            (vf (cl:slot-value from 'options))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'source-context)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::source-context))
        (cl:setf (cl:slot-value self 'source-context) message)
        (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'source-context))))
  (cl:when (cl:logbitp 4 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'syntax) (cl:slot-value from 'syntax))
    (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
)


(cl:defclass enum-value (pb:protocol-buffer)
  (
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (number
   :accessor number
   :initform 0
   :type (cl:signed-byte 32))
  (options
   :accessor options
   :initform (cl:make-array
              0
              :element-type 'google.protobuf::option
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector google.protobuf::option))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 3))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'enum-value)

(cl:export 'name)


(cl:defmethod (cl:setf name) :after (x (self enum-value))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self enum-value))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self enum-value))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)

(cl:export 'number)


(cl:defmethod (cl:setf number) :after (x (self enum-value))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-number)
  (cl:defgeneric has-number (proto)))
(cl:defmethod has-number ((self enum-value))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-number)

(cl:unless (cl:fboundp 'clear-number)
  (cl:defgeneric clear-number (proto)))
(cl:defmethod clear-number ((self enum-value))
  (cl:setf (cl:slot-value self 'number) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-number)

(cl:export 'options)

(cl:unless (cl:fboundp 'clear-options)
  (cl:defgeneric clear-options (proto)))
(cl:defmethod clear-options ((self enum-value))
  (cl:setf (cl:slot-value self 'options)
           (cl:make-array 0 :element-type 'google.protobuf::option
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-options)


(cl:defmethod cl:print-object ((self enum-value) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_number: ~s" (number self)))
      (cl:format stream " ~_options: ~s" (options self))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self enum-value))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:setf (cl:slot-value self 'number) 0)
  (cl:setf (cl:slot-value self 'options)
           (cl:make-array 0 :element-type 'google.protobuf::option
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self enum-value))
  cl:t)

(cl:defmethod pb:octet-size ((self enum-value))
  (cl:let ((size 0))
    ;; string name = 1[json_name = "name"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    ;; int32 number = 2[json_name = "number"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'number))))))
    ;; repeated .google.protobuf.Option options = 3[json_name = "options"];
    (cl:let* ((v (cl:slot-value self 'options))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self enum-value) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string name = 1[json_name = "name"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  ;; int32 number = 2[json_name = "number"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'number)))))
  ;; repeated .google.protobuf.Option options = 3[json_name = "options"];
  (cl:let* ((v (cl:slot-value self 'options))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  index)

(cl:defmethod pb:merge-from-array ((self enum-value) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string name = 1[json_name = "name"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; int32 number = 2[json_name = "number"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'number) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; repeated .google.protobuf.Option options = 3[json_name = "options"];
        ((26)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'google.protobuf::option)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'options)))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self enum-value) (from enum-value))
  (cl:let* ((v (cl:slot-value self 'options))
            (vf (cl:slot-value from 'options))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'number) (cl:slot-value from 'number))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)


(cl:defclass option (pb:protocol-buffer)
  (
  (name
   :accessor name
   :initform (pb:string-field "")
   :type pb::%sf%)
  (value
   :writer (cl:setf value)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::any))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'option)

(cl:export 'name)


(cl:defmethod (cl:setf name) :after (x (self option))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self option))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self option))
  (cl:setf (cl:slot-value self 'name) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)

(cl:export 'value)

(cl:unless (cl:fboundp 'value)
  (cl:defgeneric value (proto)))
(cl:defmethod value ((self option))
  (cl:let ((result (cl:slot-value self 'value)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::any))
      (cl:setf (cl:slot-value self 'value) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf value) :after (x (self option))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-value)
  (cl:defgeneric has-value (proto)))
(cl:defmethod has-value ((self option))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-value)

(cl:unless (cl:fboundp 'clear-value)
  (cl:defgeneric clear-value (proto)))
(cl:defmethod clear-value ((self option))
  (cl:setf (cl:slot-value self 'value) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-value)


(cl:defmethod cl:print-object ((self option) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_value: ~s" (value self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self option))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (pb:string-field "")))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'value) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self option))
  cl:t)

(cl:defmethod pb:octet-size ((self option))
  (cl:let ((size 0))
    ;; string name = 1[json_name = "name"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'name))))
        (cl:+ s (varint:length32 s)))))
    ;; .google.protobuf.Any value = 2[json_name = "value"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'value))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self option) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string name = 1[json_name = "name"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%octets%))))
  ;; .google.protobuf.Any value = 2[json_name = "value"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'value) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'value) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self option) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string name = 1[json_name = "name"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'name) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .google.protobuf.Any value = 2[json_name = "value"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'value)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::any))
                (cl:setf (cl:slot-value self 'value) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self option) (from option))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'name) (cl:slot-value from 'name))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'value)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::any))
        (cl:setf (cl:slot-value self 'value) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'value))))
)


