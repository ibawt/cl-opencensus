
;;;;    opencensus/proto/trace/v1/trace.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:opencensus.proto.trace.v1)
    (make-package '#:opencensus.proto.trace.v1 :use nil)))
(in-package #:opencensus.proto.trace.v1)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:deftype span-time-event-message-event-type () '(cl:member 0 1 2))
(cl:export 'span-time-event-message-event-type)

(cl:defconstant +span-time-event-message-event-type-type-unspecified+ 0)
(cl:export '+span-time-event-message-event-type-type-unspecified+)
(cl:defconstant +span-time-event-message-event-type-sent+ 1)
(cl:export '+span-time-event-message-event-type-sent+)
(cl:defconstant +span-time-event-message-event-type-received+ 2)
(cl:export '+span-time-event-message-event-type-received+)

(cl:defconstant +minimum-span-time-event-message-event-type+ +span-time-event-message-event-type-type-unspecified+)
(cl:export '+minimum-span-time-event-message-event-type+)
(cl:defconstant +maximum-span-time-event-message-event-type+ +span-time-event-message-event-type-received+)
(cl:export '+maximum-span-time-event-message-event-type+)

(cl:deftype span-link-type () '(cl:member 0 1 2))
(cl:export 'span-link-type)

(cl:defconstant +span-link-type-type-unspecified+ 0)
(cl:export '+span-link-type-type-unspecified+)
(cl:defconstant +span-link-type-child-linked-span+ 1)
(cl:export '+span-link-type-child-linked-span+)
(cl:defconstant +span-link-type-parent-linked-span+ 2)
(cl:export '+span-link-type-parent-linked-span+)

(cl:defconstant +minimum-span-link-type+ +span-link-type-type-unspecified+)
(cl:export '+minimum-span-link-type+)
(cl:defconstant +maximum-span-link-type+ +span-link-type-parent-linked-span+)
(cl:export '+maximum-span-link-type+)

(cl:deftype span-span-kind () '(cl:member 0 1 2))
(cl:export 'span-span-kind)

(cl:defconstant +span-span-kind-span-kind-unspecified+ 0)
(cl:export '+span-span-kind-span-kind-unspecified+)
(cl:defconstant +span-span-kind-server+ 1)
(cl:export '+span-span-kind-server+)
(cl:defconstant +span-span-kind-client+ 2)
(cl:export '+span-span-kind-client+)

(cl:defconstant +minimum-span-span-kind+ +span-span-kind-span-kind-unspecified+)
(cl:export '+minimum-span-span-kind+)
(cl:defconstant +maximum-span-span-kind+ +span-span-kind-client+)
(cl:export '+maximum-span-span-kind+)

(cl:defclass span-tracestate-entry (pb:protocol-buffer)
  (
  (key
   :accessor key
   :initform (pb:string-field "")
   :type pb::%sf%)
  (value
   :accessor value
   :initform (pb:string-field "")
   :type pb::%sf%)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-tracestate-entry)

(cl:export 'key)


(cl:defmethod (cl:setf key) :after (x (self span-tracestate-entry))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-key)
  (cl:defgeneric has-key (proto)))
(cl:defmethod has-key ((self span-tracestate-entry))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-key)

(cl:unless (cl:fboundp 'clear-key)
  (cl:defgeneric clear-key (proto)))
(cl:defmethod clear-key ((self span-tracestate-entry))
  (cl:setf (cl:slot-value self 'key) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-key)

(cl:export 'value)


(cl:defmethod (cl:setf value) :after (x (self span-tracestate-entry))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-value)
  (cl:defgeneric has-value (proto)))
(cl:defmethod has-value ((self span-tracestate-entry))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-value)

(cl:unless (cl:fboundp 'clear-value)
  (cl:defgeneric clear-value (proto)))
(cl:defmethod clear-value ((self span-tracestate-entry))
  (cl:setf (cl:slot-value self 'value) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-value)



(cl:defclass span-tracestate (pb:protocol-buffer)
  (
  (entries
   :accessor entries
   :initform (cl:make-array
              0
              :element-type 'opencensus.proto.trace.v1::span-tracestate-entry
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector opencensus.proto.trace.v1::span-tracestate-entry))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 1))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-tracestate)

(cl:export 'entries)

(cl:unless (cl:fboundp 'clear-entries)
  (cl:defgeneric clear-entries (proto)))
(cl:defmethod clear-entries ((self span-tracestate))
  (cl:setf (cl:slot-value self 'entries)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span-tracestate-entry
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-entries)



(cl:defclass span-attributes-attribute-map-entry (pb:protocol-buffer)
  (
  (key
   :accessor key
   :initform (pb:string-field "")
   :type pb::%sf%)
  (value
   :writer (cl:setf value)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::attribute-value))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-attributes-attribute-map-entry)

(cl:export 'key)


(cl:defmethod (cl:setf key) :after (x (self span-attributes-attribute-map-entry))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-key)
  (cl:defgeneric has-key (proto)))
(cl:defmethod has-key ((self span-attributes-attribute-map-entry))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-key)

(cl:unless (cl:fboundp 'clear-key)
  (cl:defgeneric clear-key (proto)))
(cl:defmethod clear-key ((self span-attributes-attribute-map-entry))
  (cl:setf (cl:slot-value self 'key) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-key)

(cl:export 'value)

(cl:unless (cl:fboundp 'value)
  (cl:defgeneric value (proto)))
(cl:defmethod value ((self span-attributes-attribute-map-entry))
  (cl:let ((result (cl:slot-value self 'value)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::attribute-value))
      (cl:setf (cl:slot-value self 'value) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf value) :after (x (self span-attributes-attribute-map-entry))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-value)
  (cl:defgeneric has-value (proto)))
(cl:defmethod has-value ((self span-attributes-attribute-map-entry))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-value)

(cl:unless (cl:fboundp 'clear-value)
  (cl:defgeneric clear-value (proto)))
(cl:defmethod clear-value ((self span-attributes-attribute-map-entry))
  (cl:setf (cl:slot-value self 'value) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-value)



(cl:defclass span-attributes (pb:protocol-buffer)
  (
  (attribute-map
   :accessor attribute-map
   :initform (cl:make-array
              0
              :element-type 'opencensus.proto.trace.v1::span-attributes-attribute-map-entry
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector opencensus.proto.trace.v1::span-attributes-attribute-map-entry))
  (dropped-attributes-count
   :accessor dropped-attributes-count
   :initform 0
   :type (cl:signed-byte 32))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-attributes)

(cl:export 'attribute-map)

(cl:unless (cl:fboundp 'clear-attribute-map)
  (cl:defgeneric clear-attribute-map (proto)))
(cl:defmethod clear-attribute-map ((self span-attributes))
  (cl:setf (cl:slot-value self 'attribute-map)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span-attributes-attribute-map-entry
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-attribute-map)

(cl:export 'dropped-attributes-count)


(cl:defmethod (cl:setf dropped-attributes-count) :after (x (self span-attributes))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-dropped-attributes-count)
  (cl:defgeneric has-dropped-attributes-count (proto)))
(cl:defmethod has-dropped-attributes-count ((self span-attributes))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-dropped-attributes-count)

(cl:unless (cl:fboundp 'clear-dropped-attributes-count)
  (cl:defgeneric clear-dropped-attributes-count (proto)))
(cl:defmethod clear-dropped-attributes-count ((self span-attributes))
  (cl:setf (cl:slot-value self 'dropped-attributes-count) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-dropped-attributes-count)



(cl:defclass span-time-event-annotation (pb:protocol-buffer)
  (
  (description
   :writer (cl:setf description)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (attributes
   :writer (cl:setf attributes)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-attributes))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-time-event-annotation)

(cl:export 'description)

(cl:unless (cl:fboundp 'description)
  (cl:defgeneric description (proto)))
(cl:defmethod description ((self span-time-event-annotation))
  (cl:let ((result (cl:slot-value self 'description)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'description) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf description) :after (x (self span-time-event-annotation))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-description)
  (cl:defgeneric has-description (proto)))
(cl:defmethod has-description ((self span-time-event-annotation))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-description)

(cl:unless (cl:fboundp 'clear-description)
  (cl:defgeneric clear-description (proto)))
(cl:defmethod clear-description ((self span-time-event-annotation))
  (cl:setf (cl:slot-value self 'description) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-description)

(cl:export 'attributes)

(cl:unless (cl:fboundp 'attributes)
  (cl:defgeneric attributes (proto)))
(cl:defmethod attributes ((self span-time-event-annotation))
  (cl:let ((result (cl:slot-value self 'attributes)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
      (cl:setf (cl:slot-value self 'attributes) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf attributes) :after (x (self span-time-event-annotation))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-attributes)
  (cl:defgeneric has-attributes (proto)))
(cl:defmethod has-attributes ((self span-time-event-annotation))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-attributes)

(cl:unless (cl:fboundp 'clear-attributes)
  (cl:defgeneric clear-attributes (proto)))
(cl:defmethod clear-attributes ((self span-time-event-annotation))
  (cl:setf (cl:slot-value self 'attributes) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-attributes)



(cl:defclass span-time-event-message-event (pb:protocol-buffer)
  (
  (type
   :accessor type
   :initform opencensus.proto.trace.v1::+span-time-event-message-event-type-type-unspecified+
   :type opencensus.proto.trace.v1::span-time-event-message-event-type)
  (id
   :accessor id
   :initform 0
   :type (cl:unsigned-byte 64))
  (uncompressed-size
   :accessor uncompressed-size
   :initform 0
   :type (cl:unsigned-byte 64))
  (compressed-size
   :accessor compressed-size
   :initform 0
   :type (cl:unsigned-byte 64))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 4))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-time-event-message-event)

(cl:export 'type)


(cl:defmethod (cl:setf type) :after (x (self span-time-event-message-event))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-type)
  (cl:defgeneric has-type (proto)))
(cl:defmethod has-type ((self span-time-event-message-event))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-type)

(cl:unless (cl:fboundp 'clear-type)
  (cl:defgeneric clear-type (proto)))
(cl:defmethod clear-type ((self span-time-event-message-event))
  (cl:setf (cl:slot-value self 'type) opencensus.proto.trace.v1::+span-time-event-message-event-type-type-unspecified+)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-type)

(cl:export 'id)


(cl:defmethod (cl:setf id) :after (x (self span-time-event-message-event))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-id)
  (cl:defgeneric has-id (proto)))
(cl:defmethod has-id ((self span-time-event-message-event))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-id)

(cl:unless (cl:fboundp 'clear-id)
  (cl:defgeneric clear-id (proto)))
(cl:defmethod clear-id ((self span-time-event-message-event))
  (cl:setf (cl:slot-value self 'id) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-id)

(cl:export 'uncompressed-size)


(cl:defmethod (cl:setf uncompressed-size) :after (x (self span-time-event-message-event))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-uncompressed-size)
  (cl:defgeneric has-uncompressed-size (proto)))
(cl:defmethod has-uncompressed-size ((self span-time-event-message-event))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-uncompressed-size)

(cl:unless (cl:fboundp 'clear-uncompressed-size)
  (cl:defgeneric clear-uncompressed-size (proto)))
(cl:defmethod clear-uncompressed-size ((self span-time-event-message-event))
  (cl:setf (cl:slot-value self 'uncompressed-size) 0)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-uncompressed-size)

(cl:export 'compressed-size)


(cl:defmethod (cl:setf compressed-size) :after (x (self span-time-event-message-event))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-compressed-size)
  (cl:defgeneric has-compressed-size (proto)))
(cl:defmethod has-compressed-size ((self span-time-event-message-event))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-compressed-size)

(cl:unless (cl:fboundp 'clear-compressed-size)
  (cl:defgeneric clear-compressed-size (proto)))
(cl:defmethod clear-compressed-size ((self span-time-event-message-event))
  (cl:setf (cl:slot-value self 'compressed-size) 0)
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-compressed-size)



(cl:defclass span-time-event (pb:protocol-buffer)
  (
  (time
   :writer (cl:setf time)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::timestamp))
  (annotation
   :writer (cl:setf annotation)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-time-event-annotation))
  (message-event
   :writer (cl:setf message-event)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-time-event-message-event))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 3))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-time-event)

(cl:export 'time)

(cl:unless (cl:fboundp 'time)
  (cl:defgeneric time (proto)))
(cl:defmethod time ((self span-time-event))
  (cl:let ((result (cl:slot-value self 'time)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::timestamp))
      (cl:setf (cl:slot-value self 'time) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf time) :after (x (self span-time-event))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-time)
  (cl:defgeneric has-time (proto)))
(cl:defmethod has-time ((self span-time-event))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-time)

(cl:unless (cl:fboundp 'clear-time)
  (cl:defgeneric clear-time (proto)))
(cl:defmethod clear-time ((self span-time-event))
  (cl:setf (cl:slot-value self 'time) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-time)

(cl:export 'annotation)

(cl:unless (cl:fboundp 'annotation)
  (cl:defgeneric annotation (proto)))
(cl:defmethod annotation ((self span-time-event))
  (cl:let ((result (cl:slot-value self 'annotation)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-time-event-annotation))
      (cl:setf (cl:slot-value self 'annotation) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf annotation) :after (x (self span-time-event))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-annotation)
  (cl:defgeneric has-annotation (proto)))
(cl:defmethod has-annotation ((self span-time-event))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-annotation)

(cl:unless (cl:fboundp 'clear-annotation)
  (cl:defgeneric clear-annotation (proto)))
(cl:defmethod clear-annotation ((self span-time-event))
  (cl:setf (cl:slot-value self 'annotation) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-annotation)

(cl:export 'message-event)

(cl:unless (cl:fboundp 'message-event)
  (cl:defgeneric message-event (proto)))
(cl:defmethod message-event ((self span-time-event))
  (cl:let ((result (cl:slot-value self 'message-event)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-time-event-message-event))
      (cl:setf (cl:slot-value self 'message-event) result))
      (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf message-event) :after (x (self span-time-event))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-message-event)
  (cl:defgeneric has-message-event (proto)))
(cl:defmethod has-message-event ((self span-time-event))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-message-event)

(cl:unless (cl:fboundp 'clear-message-event)
  (cl:defgeneric clear-message-event (proto)))
(cl:defmethod clear-message-event ((self span-time-event))
  (cl:setf (cl:slot-value self 'message-event) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-message-event)



(cl:defclass span-time-events (pb:protocol-buffer)
  (
  (time-event
   :accessor time-event
   :initform (cl:make-array
              0
              :element-type 'opencensus.proto.trace.v1::span-time-event
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector opencensus.proto.trace.v1::span-time-event))
  (dropped-annotations-count
   :accessor dropped-annotations-count
   :initform 0
   :type (cl:signed-byte 32))
  (dropped-message-events-count
   :accessor dropped-message-events-count
   :initform 0
   :type (cl:signed-byte 32))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 3))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-time-events)

(cl:export 'time-event)

(cl:unless (cl:fboundp 'clear-time-event)
  (cl:defgeneric clear-time-event (proto)))
(cl:defmethod clear-time-event ((self span-time-events))
  (cl:setf (cl:slot-value self 'time-event)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span-time-event
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-time-event)

(cl:export 'dropped-annotations-count)


(cl:defmethod (cl:setf dropped-annotations-count) :after (x (self span-time-events))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-dropped-annotations-count)
  (cl:defgeneric has-dropped-annotations-count (proto)))
(cl:defmethod has-dropped-annotations-count ((self span-time-events))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-dropped-annotations-count)

(cl:unless (cl:fboundp 'clear-dropped-annotations-count)
  (cl:defgeneric clear-dropped-annotations-count (proto)))
(cl:defmethod clear-dropped-annotations-count ((self span-time-events))
  (cl:setf (cl:slot-value self 'dropped-annotations-count) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-dropped-annotations-count)

(cl:export 'dropped-message-events-count)


(cl:defmethod (cl:setf dropped-message-events-count) :after (x (self span-time-events))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-dropped-message-events-count)
  (cl:defgeneric has-dropped-message-events-count (proto)))
(cl:defmethod has-dropped-message-events-count ((self span-time-events))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-dropped-message-events-count)

(cl:unless (cl:fboundp 'clear-dropped-message-events-count)
  (cl:defgeneric clear-dropped-message-events-count (proto)))
(cl:defmethod clear-dropped-message-events-count ((self span-time-events))
  (cl:setf (cl:slot-value self 'dropped-message-events-count) 0)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-dropped-message-events-count)



(cl:defclass span-link (pb:protocol-buffer)
  (
  (trace-id
   :accessor trace-id
   :initform (cl:make-array 0 :element-type '(cl:unsigned-byte 8))
   :type (cl:simple-array (cl:unsigned-byte 8) (cl:*)))
  (span-id
   :accessor span-id
   :initform (cl:make-array 0 :element-type '(cl:unsigned-byte 8))
   :type (cl:simple-array (cl:unsigned-byte 8) (cl:*)))
  (type
   :accessor type
   :initform opencensus.proto.trace.v1::+span-link-type-type-unspecified+
   :type opencensus.proto.trace.v1::span-link-type)
  (attributes
   :writer (cl:setf attributes)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-attributes))
  (tracestate
   :writer (cl:setf tracestate)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-tracestate))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 5))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-link)

(cl:export 'trace-id)


(cl:defmethod (cl:setf trace-id) :after (x (self span-link))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-trace-id)
  (cl:defgeneric has-trace-id (proto)))
(cl:defmethod has-trace-id ((self span-link))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-trace-id)

(cl:unless (cl:fboundp 'clear-trace-id)
  (cl:defgeneric clear-trace-id (proto)))
(cl:defmethod clear-trace-id ((self span-link))
  (cl:setf (cl:slot-value self 'trace-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8)))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-trace-id)

(cl:export 'span-id)


(cl:defmethod (cl:setf span-id) :after (x (self span-link))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-span-id)
  (cl:defgeneric has-span-id (proto)))
(cl:defmethod has-span-id ((self span-link))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-span-id)

(cl:unless (cl:fboundp 'clear-span-id)
  (cl:defgeneric clear-span-id (proto)))
(cl:defmethod clear-span-id ((self span-link))
  (cl:setf (cl:slot-value self 'span-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8)))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-span-id)

(cl:export 'type)


(cl:defmethod (cl:setf type) :after (x (self span-link))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-type)
  (cl:defgeneric has-type (proto)))
(cl:defmethod has-type ((self span-link))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-type)

(cl:unless (cl:fboundp 'clear-type)
  (cl:defgeneric clear-type (proto)))
(cl:defmethod clear-type ((self span-link))
  (cl:setf (cl:slot-value self 'type) opencensus.proto.trace.v1::+span-link-type-type-unspecified+)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-type)

(cl:export 'attributes)

(cl:unless (cl:fboundp 'attributes)
  (cl:defgeneric attributes (proto)))
(cl:defmethod attributes ((self span-link))
  (cl:let ((result (cl:slot-value self 'attributes)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
      (cl:setf (cl:slot-value self 'attributes) result))
      (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf attributes) :after (x (self span-link))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-attributes)
  (cl:defgeneric has-attributes (proto)))
(cl:defmethod has-attributes ((self span-link))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-attributes)

(cl:unless (cl:fboundp 'clear-attributes)
  (cl:defgeneric clear-attributes (proto)))
(cl:defmethod clear-attributes ((self span-link))
  (cl:setf (cl:slot-value self 'attributes) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-attributes)

(cl:export 'tracestate)

(cl:unless (cl:fboundp 'tracestate)
  (cl:defgeneric tracestate (proto)))
(cl:defmethod tracestate ((self span-link))
  (cl:let ((result (cl:slot-value self 'tracestate)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-tracestate))
      (cl:setf (cl:slot-value self 'tracestate) result))
      (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf tracestate) :after (x (self span-link))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-tracestate)
  (cl:defgeneric has-tracestate (proto)))
(cl:defmethod has-tracestate ((self span-link))
  (cl:logbitp 4 (cl:slot-value self '%has-bits%)))
(cl:export 'has-tracestate)

(cl:unless (cl:fboundp 'clear-tracestate)
  (cl:defgeneric clear-tracestate (proto)))
(cl:defmethod clear-tracestate ((self span-link))
  (cl:setf (cl:slot-value self 'tracestate) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-tracestate)



(cl:defclass span-links (pb:protocol-buffer)
  (
  (link
   :accessor link
   :initform (cl:make-array
              0
              :element-type 'opencensus.proto.trace.v1::span-link
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector opencensus.proto.trace.v1::span-link))
  (dropped-links-count
   :accessor dropped-links-count
   :initform 0
   :type (cl:signed-byte 32))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span-links)

(cl:export 'link)

(cl:unless (cl:fboundp 'clear-link)
  (cl:defgeneric clear-link (proto)))
(cl:defmethod clear-link ((self span-links))
  (cl:setf (cl:slot-value self 'link)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span-link
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-link)

(cl:export 'dropped-links-count)


(cl:defmethod (cl:setf dropped-links-count) :after (x (self span-links))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-dropped-links-count)
  (cl:defgeneric has-dropped-links-count (proto)))
(cl:defmethod has-dropped-links-count ((self span-links))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-dropped-links-count)

(cl:unless (cl:fboundp 'clear-dropped-links-count)
  (cl:defgeneric clear-dropped-links-count (proto)))
(cl:defmethod clear-dropped-links-count ((self span-links))
  (cl:setf (cl:slot-value self 'dropped-links-count) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-dropped-links-count)



(cl:defclass span (pb:protocol-buffer)
  (
  (trace-id
   :accessor trace-id
   :initform (cl:make-array 0 :element-type '(cl:unsigned-byte 8))
   :type (cl:simple-array (cl:unsigned-byte 8) (cl:*)))
  (span-id
   :accessor span-id
   :initform (cl:make-array 0 :element-type '(cl:unsigned-byte 8))
   :type (cl:simple-array (cl:unsigned-byte 8) (cl:*)))
  (tracestate
   :writer (cl:setf tracestate)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-tracestate))
  (parent-span-id
   :accessor parent-span-id
   :initform (cl:make-array 0 :element-type '(cl:unsigned-byte 8))
   :type (cl:simple-array (cl:unsigned-byte 8) (cl:*)))
  (name
   :writer (cl:setf name)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (kind
   :accessor kind
   :initform opencensus.proto.trace.v1::+span-span-kind-span-kind-unspecified+
   :type opencensus.proto.trace.v1::span-span-kind)
  (start-time
   :writer (cl:setf start-time)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::timestamp))
  (end-time
   :writer (cl:setf end-time)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::timestamp))
  (attributes
   :writer (cl:setf attributes)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-attributes))
  (stack-trace
   :writer (cl:setf stack-trace)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::stack-trace))
  (time-events
   :writer (cl:setf time-events)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-time-events))
  (links
   :writer (cl:setf links)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::span-links))
  (status
   :writer (cl:setf status)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::status))
  (resource
   :writer (cl:setf resource)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.resource.v1::resource))
  (same-process-as-parent-span
   :writer (cl:setf same-process-as-parent-span)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::bool-value))
  (child-span-count
   :writer (cl:setf child-span-count)
   :initform cl:nil
   :type (cl:or cl:null google.protobuf::uint32value))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 16))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'span)

(cl:export 'trace-id)


(cl:defmethod (cl:setf trace-id) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-trace-id)
  (cl:defgeneric has-trace-id (proto)))
(cl:defmethod has-trace-id ((self span))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-trace-id)

(cl:unless (cl:fboundp 'clear-trace-id)
  (cl:defgeneric clear-trace-id (proto)))
(cl:defmethod clear-trace-id ((self span))
  (cl:setf (cl:slot-value self 'trace-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8)))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-trace-id)

(cl:export 'span-id)


(cl:defmethod (cl:setf span-id) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-span-id)
  (cl:defgeneric has-span-id (proto)))
(cl:defmethod has-span-id ((self span))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-span-id)

(cl:unless (cl:fboundp 'clear-span-id)
  (cl:defgeneric clear-span-id (proto)))
(cl:defmethod clear-span-id ((self span))
  (cl:setf (cl:slot-value self 'span-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8)))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-span-id)

(cl:export 'tracestate)

(cl:unless (cl:fboundp 'tracestate)
  (cl:defgeneric tracestate (proto)))
(cl:defmethod tracestate ((self span))
  (cl:let ((result (cl:slot-value self 'tracestate)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-tracestate))
      (cl:setf (cl:slot-value self 'tracestate) result))
      (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf tracestate) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-tracestate)
  (cl:defgeneric has-tracestate (proto)))
(cl:defmethod has-tracestate ((self span))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-tracestate)

(cl:unless (cl:fboundp 'clear-tracestate)
  (cl:defgeneric clear-tracestate (proto)))
(cl:defmethod clear-tracestate ((self span))
  (cl:setf (cl:slot-value self 'tracestate) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-tracestate)

(cl:export 'parent-span-id)


(cl:defmethod (cl:setf parent-span-id) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-parent-span-id)
  (cl:defgeneric has-parent-span-id (proto)))
(cl:defmethod has-parent-span-id ((self span))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-parent-span-id)

(cl:unless (cl:fboundp 'clear-parent-span-id)
  (cl:defgeneric clear-parent-span-id (proto)))
(cl:defmethod clear-parent-span-id ((self span))
  (cl:setf (cl:slot-value self 'parent-span-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8)))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-parent-span-id)

(cl:export 'name)

(cl:unless (cl:fboundp 'name)
  (cl:defgeneric name (proto)))
(cl:defmethod name ((self span))
  (cl:let ((result (cl:slot-value self 'name)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'name) result))
      (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf name) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-name)
  (cl:defgeneric has-name (proto)))
(cl:defmethod has-name ((self span))
  (cl:logbitp 4 (cl:slot-value self '%has-bits%)))
(cl:export 'has-name)

(cl:unless (cl:fboundp 'clear-name)
  (cl:defgeneric clear-name (proto)))
(cl:defmethod clear-name ((self span))
  (cl:setf (cl:slot-value self 'name) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-name)

(cl:export 'kind)


(cl:defmethod (cl:setf kind) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-kind)
  (cl:defgeneric has-kind (proto)))
(cl:defmethod has-kind ((self span))
  (cl:logbitp 5 (cl:slot-value self '%has-bits%)))
(cl:export 'has-kind)

(cl:unless (cl:fboundp 'clear-kind)
  (cl:defgeneric clear-kind (proto)))
(cl:defmethod clear-kind ((self span))
  (cl:setf (cl:slot-value self 'kind) opencensus.proto.trace.v1::+span-span-kind-span-kind-unspecified+)
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-kind)

(cl:export 'start-time)

(cl:unless (cl:fboundp 'start-time)
  (cl:defgeneric start-time (proto)))
(cl:defmethod start-time ((self span))
  (cl:let ((result (cl:slot-value self 'start-time)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::timestamp))
      (cl:setf (cl:slot-value self 'start-time) result))
      (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf start-time) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-start-time)
  (cl:defgeneric has-start-time (proto)))
(cl:defmethod has-start-time ((self span))
  (cl:logbitp 6 (cl:slot-value self '%has-bits%)))
(cl:export 'has-start-time)

(cl:unless (cl:fboundp 'clear-start-time)
  (cl:defgeneric clear-start-time (proto)))
(cl:defmethod clear-start-time ((self span))
  (cl:setf (cl:slot-value self 'start-time) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-start-time)

(cl:export 'end-time)

(cl:unless (cl:fboundp 'end-time)
  (cl:defgeneric end-time (proto)))
(cl:defmethod end-time ((self span))
  (cl:let ((result (cl:slot-value self 'end-time)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::timestamp))
      (cl:setf (cl:slot-value self 'end-time) result))
      (cl:setf (cl:ldb (cl:byte 1 7) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf end-time) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 7) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-end-time)
  (cl:defgeneric has-end-time (proto)))
(cl:defmethod has-end-time ((self span))
  (cl:logbitp 7 (cl:slot-value self '%has-bits%)))
(cl:export 'has-end-time)

(cl:unless (cl:fboundp 'clear-end-time)
  (cl:defgeneric clear-end-time (proto)))
(cl:defmethod clear-end-time ((self span))
  (cl:setf (cl:slot-value self 'end-time) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 7) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-end-time)

(cl:export 'attributes)

(cl:unless (cl:fboundp 'attributes)
  (cl:defgeneric attributes (proto)))
(cl:defmethod attributes ((self span))
  (cl:let ((result (cl:slot-value self 'attributes)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
      (cl:setf (cl:slot-value self 'attributes) result))
      (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf attributes) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-attributes)
  (cl:defgeneric has-attributes (proto)))
(cl:defmethod has-attributes ((self span))
  (cl:logbitp 8 (cl:slot-value self '%has-bits%)))
(cl:export 'has-attributes)

(cl:unless (cl:fboundp 'clear-attributes)
  (cl:defgeneric clear-attributes (proto)))
(cl:defmethod clear-attributes ((self span))
  (cl:setf (cl:slot-value self 'attributes) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-attributes)

(cl:export 'stack-trace)

(cl:unless (cl:fboundp 'stack-trace)
  (cl:defgeneric stack-trace (proto)))
(cl:defmethod stack-trace ((self span))
  (cl:let ((result (cl:slot-value self 'stack-trace)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::stack-trace))
      (cl:setf (cl:slot-value self 'stack-trace) result))
      (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf stack-trace) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-stack-trace)
  (cl:defgeneric has-stack-trace (proto)))
(cl:defmethod has-stack-trace ((self span))
  (cl:logbitp 9 (cl:slot-value self '%has-bits%)))
(cl:export 'has-stack-trace)

(cl:unless (cl:fboundp 'clear-stack-trace)
  (cl:defgeneric clear-stack-trace (proto)))
(cl:defmethod clear-stack-trace ((self span))
  (cl:setf (cl:slot-value self 'stack-trace) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-stack-trace)

(cl:export 'time-events)

(cl:unless (cl:fboundp 'time-events)
  (cl:defgeneric time-events (proto)))
(cl:defmethod time-events ((self span))
  (cl:let ((result (cl:slot-value self 'time-events)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-time-events))
      (cl:setf (cl:slot-value self 'time-events) result))
      (cl:setf (cl:ldb (cl:byte 1 10) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf time-events) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 10) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-time-events)
  (cl:defgeneric has-time-events (proto)))
(cl:defmethod has-time-events ((self span))
  (cl:logbitp 10 (cl:slot-value self '%has-bits%)))
(cl:export 'has-time-events)

(cl:unless (cl:fboundp 'clear-time-events)
  (cl:defgeneric clear-time-events (proto)))
(cl:defmethod clear-time-events ((self span))
  (cl:setf (cl:slot-value self 'time-events) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 10) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-time-events)

(cl:export 'links)

(cl:unless (cl:fboundp 'links)
  (cl:defgeneric links (proto)))
(cl:defmethod links ((self span))
  (cl:let ((result (cl:slot-value self 'links)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::span-links))
      (cl:setf (cl:slot-value self 'links) result))
      (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf links) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-links)
  (cl:defgeneric has-links (proto)))
(cl:defmethod has-links ((self span))
  (cl:logbitp 11 (cl:slot-value self '%has-bits%)))
(cl:export 'has-links)

(cl:unless (cl:fboundp 'clear-links)
  (cl:defgeneric clear-links (proto)))
(cl:defmethod clear-links ((self span))
  (cl:setf (cl:slot-value self 'links) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-links)

(cl:export 'status)

(cl:unless (cl:fboundp 'status)
  (cl:defgeneric status (proto)))
(cl:defmethod status ((self span))
  (cl:let ((result (cl:slot-value self 'status)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::status))
      (cl:setf (cl:slot-value self 'status) result))
      (cl:setf (cl:ldb (cl:byte 1 12) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf status) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 12) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-status)
  (cl:defgeneric has-status (proto)))
(cl:defmethod has-status ((self span))
  (cl:logbitp 12 (cl:slot-value self '%has-bits%)))
(cl:export 'has-status)

(cl:unless (cl:fboundp 'clear-status)
  (cl:defgeneric clear-status (proto)))
(cl:defmethod clear-status ((self span))
  (cl:setf (cl:slot-value self 'status) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 12) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-status)

(cl:export 'resource)

(cl:unless (cl:fboundp 'resource)
  (cl:defgeneric resource (proto)))
(cl:defmethod resource ((self span))
  (cl:let ((result (cl:slot-value self 'resource)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.resource.v1::resource))
      (cl:setf (cl:slot-value self 'resource) result))
      (cl:setf (cl:ldb (cl:byte 1 13) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf resource) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 13) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-resource)
  (cl:defgeneric has-resource (proto)))
(cl:defmethod has-resource ((self span))
  (cl:logbitp 13 (cl:slot-value self '%has-bits%)))
(cl:export 'has-resource)

(cl:unless (cl:fboundp 'clear-resource)
  (cl:defgeneric clear-resource (proto)))
(cl:defmethod clear-resource ((self span))
  (cl:setf (cl:slot-value self 'resource) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 13) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-resource)

(cl:export 'same-process-as-parent-span)

(cl:unless (cl:fboundp 'same-process-as-parent-span)
  (cl:defgeneric same-process-as-parent-span (proto)))
(cl:defmethod same-process-as-parent-span ((self span))
  (cl:let ((result (cl:slot-value self 'same-process-as-parent-span)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::bool-value))
      (cl:setf (cl:slot-value self 'same-process-as-parent-span) result))
      (cl:setf (cl:ldb (cl:byte 1 14) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf same-process-as-parent-span) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 14) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-same-process-as-parent-span)
  (cl:defgeneric has-same-process-as-parent-span (proto)))
(cl:defmethod has-same-process-as-parent-span ((self span))
  (cl:logbitp 14 (cl:slot-value self '%has-bits%)))
(cl:export 'has-same-process-as-parent-span)

(cl:unless (cl:fboundp 'clear-same-process-as-parent-span)
  (cl:defgeneric clear-same-process-as-parent-span (proto)))
(cl:defmethod clear-same-process-as-parent-span ((self span))
  (cl:setf (cl:slot-value self 'same-process-as-parent-span) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 14) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-same-process-as-parent-span)

(cl:export 'child-span-count)

(cl:unless (cl:fboundp 'child-span-count)
  (cl:defgeneric child-span-count (proto)))
(cl:defmethod child-span-count ((self span))
  (cl:let ((result (cl:slot-value self 'child-span-count)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'google.protobuf::uint32value))
      (cl:setf (cl:slot-value self 'child-span-count) result))
      (cl:setf (cl:ldb (cl:byte 1 15) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf child-span-count) :after (x (self span))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 15) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-child-span-count)
  (cl:defgeneric has-child-span-count (proto)))
(cl:defmethod has-child-span-count ((self span))
  (cl:logbitp 15 (cl:slot-value self '%has-bits%)))
(cl:export 'has-child-span-count)

(cl:unless (cl:fboundp 'clear-child-span-count)
  (cl:defgeneric clear-child-span-count (proto)))
(cl:defmethod clear-child-span-count ((self span))
  (cl:setf (cl:slot-value self 'child-span-count) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 15) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-child-span-count)


(cl:defmethod cl:print-object ((self span-tracestate-entry) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_key: ~s" (key self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_value: ~s" (value self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-tracestate-entry))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'key) (pb:string-field "")))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'value) (pb:string-field "")))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-tracestate-entry))
  cl:t)

(cl:defmethod pb:octet-size ((self span-tracestate-entry))
  (cl:let ((size 0))
    ;; string key = 1[json_name = "key"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'key))))
        (cl:+ s (varint:length32 s)))))
    ;; string value = 2[json_name = "value"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'value))))
        (cl:+ s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-tracestate-entry) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string key = 1[json_name = "key"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'key) 'pb::%octets%))))
  ;; string value = 2[json_name = "value"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'value) 'pb::%octets%))))
  index)

(cl:defmethod pb:merge-from-array ((self span-tracestate-entry) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string key = 1[json_name = "key"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'key) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string value = 2[json_name = "value"];
        ((18)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'value) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-tracestate-entry) (from span-tracestate-entry))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'key) (cl:slot-value from 'key))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'value) (cl:slot-value from 'value))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)



(cl:defmethod cl:print-object ((self span-tracestate) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:format stream " ~_entries: ~s" (entries self))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-tracestate))
  (cl:setf (cl:slot-value self 'entries)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span-tracestate-entry
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-tracestate))
  cl:t)

(cl:defmethod pb:octet-size ((self span-tracestate))
  (cl:let ((size 0))
    ;; repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1[json_name = "entries"];
    (cl:let* ((v (cl:slot-value self 'entries))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-tracestate) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1[json_name = "entries"];
  (cl:let* ((v (cl:slot-value self 'entries))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  index)

(cl:defmethod pb:merge-from-array ((self span-tracestate) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1[json_name = "entries"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'opencensus.proto.trace.v1::span-tracestate-entry)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'entries)))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-tracestate) (from span-tracestate))
  (cl:let* ((v (cl:slot-value self 'entries))
            (vf (cl:slot-value from 'entries))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
)



(cl:defmethod cl:print-object ((self span-attributes-attribute-map-entry) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_key: ~s" (key self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_value: ~s" (value self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-attributes-attribute-map-entry))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'key) (pb:string-field "")))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'value) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-attributes-attribute-map-entry))
  cl:t)

(cl:defmethod pb:octet-size ((self span-attributes-attribute-map-entry))
  (cl:let ((size 0))
    ;; string key = 1[json_name = "key"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'key))))
        (cl:+ s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.AttributeValue value = 2[json_name = "value"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'value))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-attributes-attribute-map-entry) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string key = 1[json_name = "key"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'key) 'pb::%octets%))))
  ;; .opencensus.proto.trace.v1.AttributeValue value = 2[json_name = "value"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'value) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'value) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self span-attributes-attribute-map-entry) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string key = 1[json_name = "key"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'key) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .opencensus.proto.trace.v1.AttributeValue value = 2[json_name = "value"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'value)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::attribute-value))
                (cl:setf (cl:slot-value self 'value) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-attributes-attribute-map-entry) (from span-attributes-attribute-map-entry))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'key) (cl:slot-value from 'key))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'value)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::attribute-value))
        (cl:setf (cl:slot-value self 'value) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'value))))
)



(cl:defmethod cl:print-object ((self span-attributes) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:format stream " ~_attribute-map: ~s" (attribute-map self))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_dropped-attributes-count: ~s" (dropped-attributes-count self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-attributes))
  (cl:setf (cl:slot-value self 'dropped-attributes-count) 0)
  (cl:setf (cl:slot-value self 'attribute-map)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span-attributes-attribute-map-entry
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-attributes))
  cl:t)

(cl:defmethod pb:octet-size ((self span-attributes))
  (cl:let ((size 0))
    ;; int32 dropped_attributes_count = 2[json_name = "droppedAttributesCount"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-attributes-count))))))
    ;; map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1[json_name = "attributeMap"];
    (cl:let* ((v (cl:slot-value self 'attribute-map))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-attributes) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1[json_name = "attributeMap"];
  (cl:let* ((v (cl:slot-value self 'attribute-map))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; int32 dropped_attributes_count = 2[json_name = "droppedAttributesCount"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-attributes-count)))))
  index)

(cl:defmethod pb:merge-from-array ((self span-attributes) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; map<string, .opencensus.proto.trace.v1.AttributeValue> attribute_map = 1[json_name = "attributeMap"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'opencensus.proto.trace.v1::span-attributes-attribute-map-entry)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'attribute-map)))))
        ;; int32 dropped_attributes_count = 2[json_name = "droppedAttributesCount"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'dropped-attributes-count) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-attributes) (from span-attributes))
  (cl:let* ((v (cl:slot-value self 'attribute-map))
            (vf (cl:slot-value from 'attribute-map))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'dropped-attributes-count) (cl:slot-value from 'dropped-attributes-count))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)



(cl:defmethod cl:print-object ((self span-time-event-annotation) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_description: ~s" (description self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_attributes: ~s" (attributes self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-time-event-annotation))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'description) cl:nil))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'attributes) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-time-event-annotation))
  cl:t)

(cl:defmethod pb:octet-size ((self span-time-event-annotation))
  (cl:let ((size 0))
    ;; .opencensus.proto.trace.v1.TruncatableString description = 1[json_name = "description"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'description))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 2[json_name = "attributes"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'attributes))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-time-event-annotation) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.trace.v1.TruncatableString description = 1[json_name = "description"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'description) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'description) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 2[json_name = "attributes"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'attributes) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'attributes) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self span-time-event-annotation) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.trace.v1.TruncatableString description = 1[json_name = "description"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'description)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'description) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 2[json_name = "attributes"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'attributes)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
                (cl:setf (cl:slot-value self 'attributes) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-time-event-annotation) (from span-time-event-annotation))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'description)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'description) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'description))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'attributes)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
        (cl:setf (cl:slot-value self 'attributes) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'attributes))))
)



(cl:defmethod cl:print-object ((self span-time-event-message-event) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_type: ~s" (type self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_id: ~s" (id self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_uncompressed-size: ~s" (uncompressed-size self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_compressed-size: ~s" (compressed-size self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-time-event-message-event))
  (cl:setf (cl:slot-value self 'type) opencensus.proto.trace.v1::+span-time-event-message-event-type-type-unspecified+)
  (cl:setf (cl:slot-value self 'id) 0)
  (cl:setf (cl:slot-value self 'uncompressed-size) 0)
  (cl:setf (cl:slot-value self 'compressed-size) 0)
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-time-event-message-event))
  cl:t)

(cl:defmethod pb:octet-size ((self span-time-event-message-event))
  (cl:let ((size 0))
    ;; .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1[json_name = "type"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'type)))))
    ;; uint64 id = 2[json_name = "id"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:slot-value self 'id)))))
    ;; uint64 uncompressed_size = 3[json_name = "uncompressedSize"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:slot-value self 'uncompressed-size)))))
    ;; uint64 compressed_size = 4[json_name = "compressedSize"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:slot-value self 'compressed-size)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-time-event-message-event) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1[json_name = "type"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 8))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'type)))))
  ;; uint64 id = 2[json_name = "id"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:slot-value self 'id))))
  ;; uint64 uncompressed_size = 3[json_name = "uncompressedSize"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 24))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:slot-value self 'uncompressed-size))))
  ;; uint64 compressed_size = 4[json_name = "compressedSize"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 32))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:slot-value self 'compressed-size))))
  index)

(cl:defmethod pb:merge-from-array ((self span-time-event-message-event) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1[json_name = "type"];
        ((8)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            ;; XXXXX: when valid, set field, else add to unknown fields
            (cl:setf (cl:slot-value self 'type) value)
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; uint64 id = 2[json_name = "id"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-uint64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'id) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; uint64 uncompressed_size = 3[json_name = "uncompressedSize"];
        ((24)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-uint64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'uncompressed-size) value)
            (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; uint64 compressed_size = 4[json_name = "compressedSize"];
        ((32)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-uint64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'compressed-size) value)
            (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-time-event-message-event) (from span-time-event-message-event))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'type) (cl:slot-value from 'type))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'id) (cl:slot-value from 'id))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'uncompressed-size) (cl:slot-value from 'uncompressed-size))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'compressed-size) (cl:slot-value from 'compressed-size))
    (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
)



(cl:defmethod cl:print-object ((self span-time-event) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_time: ~s" (time self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_annotation: ~s" (annotation self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_message-event: ~s" (message-event self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-time-event))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'time) cl:nil))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'annotation) cl:nil))
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'message-event) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-time-event))
  cl:t)

(cl:defmethod pb:octet-size ((self span-time-event))
  (cl:let ((size 0))
    ;; .google.protobuf.Timestamp time = 1[json_name = "time"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'time))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2[json_name = "annotation"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'annotation))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3[json_name = "messageEvent"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'message-event))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-time-event) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .google.protobuf.Timestamp time = 1[json_name = "time"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'time) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'time) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2[json_name = "annotation"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'annotation) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'annotation) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3[json_name = "messageEvent"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'message-event) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'message-event) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self span-time-event) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .google.protobuf.Timestamp time = 1[json_name = "time"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'time)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::timestamp))
                (cl:setf (cl:slot-value self 'time) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2[json_name = "annotation"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'annotation)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-time-event-annotation))
                (cl:setf (cl:slot-value self 'annotation) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3[json_name = "messageEvent"];
        ((26)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'message-event)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-time-event-message-event))
                (cl:setf (cl:slot-value self 'message-event) message)
                (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-time-event) (from span-time-event))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'time)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::timestamp))
        (cl:setf (cl:slot-value self 'time) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'time))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'annotation)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-time-event-annotation))
        (cl:setf (cl:slot-value self 'annotation) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'annotation))))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'message-event)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-time-event-message-event))
        (cl:setf (cl:slot-value self 'message-event) message)
        (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'message-event))))
)



(cl:defmethod cl:print-object ((self span-time-events) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:format stream " ~_time-event: ~s" (time-event self))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_dropped-annotations-count: ~s" (dropped-annotations-count self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_dropped-message-events-count: ~s" (dropped-message-events-count self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-time-events))
  (cl:setf (cl:slot-value self 'dropped-annotations-count) 0)
  (cl:setf (cl:slot-value self 'dropped-message-events-count) 0)
  (cl:setf (cl:slot-value self 'time-event)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span-time-event
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-time-events))
  cl:t)

(cl:defmethod pb:octet-size ((self span-time-events))
  (cl:let ((size 0))
    ;; int32 dropped_annotations_count = 2[json_name = "droppedAnnotationsCount"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-annotations-count))))))
    ;; int32 dropped_message_events_count = 3[json_name = "droppedMessageEventsCount"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-message-events-count))))))
    ;; repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1[json_name = "timeEvent"];
    (cl:let* ((v (cl:slot-value self 'time-event))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-time-events) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1[json_name = "timeEvent"];
  (cl:let* ((v (cl:slot-value self 'time-event))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; int32 dropped_annotations_count = 2[json_name = "droppedAnnotationsCount"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-annotations-count)))))
  ;; int32 dropped_message_events_count = 3[json_name = "droppedMessageEventsCount"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 24))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-message-events-count)))))
  index)

(cl:defmethod pb:merge-from-array ((self span-time-events) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1[json_name = "timeEvent"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'opencensus.proto.trace.v1::span-time-event)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'time-event)))))
        ;; int32 dropped_annotations_count = 2[json_name = "droppedAnnotationsCount"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'dropped-annotations-count) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; int32 dropped_message_events_count = 3[json_name = "droppedMessageEventsCount"];
        ((24)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'dropped-message-events-count) value)
            (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-time-events) (from span-time-events))
  (cl:let* ((v (cl:slot-value self 'time-event))
            (vf (cl:slot-value from 'time-event))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'dropped-annotations-count) (cl:slot-value from 'dropped-annotations-count))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'dropped-message-events-count) (cl:slot-value from 'dropped-message-events-count))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
)



(cl:defmethod cl:print-object ((self span-link) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_trace-id: ~s" (trace-id self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_span-id: ~s" (span-id self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_type: ~s" (type self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_attributes: ~s" (attributes self)))
      (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_tracestate: ~s" (tracestate self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-link))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'trace-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8))))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'span-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8))))
  (cl:setf (cl:slot-value self 'type) opencensus.proto.trace.v1::+span-link-type-type-unspecified+)
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'attributes) cl:nil))
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'tracestate) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-link))
  cl:t)

(cl:defmethod pb:octet-size ((self span-link))
  (cl:let ((size 0))
    ;; bytes trace_id = 1[json_name = "traceId"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (cl:length (cl:slot-value self 'trace-id))))
        (cl:+ s (varint:length32 s)))))
    ;; bytes span_id = 2[json_name = "spanId"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (cl:length (cl:slot-value self 'span-id))))
        (cl:+ s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.Link.Type type = 3[json_name = "type"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'type)))))
    ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 4[json_name = "attributes"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'attributes))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5[json_name = "tracestate"];
    (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'tracestate))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-link) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; bytes trace_id = 1[json_name = "traceId"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value self 'trace-id))))
  ;; bytes span_id = 2[json_name = "spanId"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value self 'span-id))))
  ;; .opencensus.proto.trace.v1.Span.Link.Type type = 3[json_name = "type"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 24))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'type)))))
  ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 4[json_name = "attributes"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 34))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'attributes) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'attributes) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5[json_name = "tracestate"];
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 42))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'tracestate) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'tracestate) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self span-link) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; bytes trace_id = 1[json_name = "traceId"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'trace-id) value)
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; bytes span_id = 2[json_name = "spanId"];
        ((18)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'span-id) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .opencensus.proto.trace.v1.Span.Link.Type type = 3[json_name = "type"];
        ((24)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            ;; XXXXX: when valid, set field, else add to unknown fields
            (cl:setf (cl:slot-value self 'type) value)
            (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 4[json_name = "attributes"];
        ((34)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'attributes)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
                (cl:setf (cl:slot-value self 'attributes) message)
                (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Span.Tracestate tracestate = 5[json_name = "tracestate"];
        ((42)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'tracestate)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-tracestate))
                (cl:setf (cl:slot-value self 'tracestate) message)
                (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-link) (from span-link))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'trace-id) (cl:slot-value from 'trace-id))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'span-id) (cl:slot-value from 'span-id))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'type) (cl:slot-value from 'type))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'attributes)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
        (cl:setf (cl:slot-value self 'attributes) message)
        (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'attributes))))
  (cl:when (cl:logbitp 4 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'tracestate)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-tracestate))
        (cl:setf (cl:slot-value self 'tracestate) message)
        (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'tracestate))))
)



(cl:defmethod cl:print-object ((self span-links) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:format stream " ~_link: ~s" (link self))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_dropped-links-count: ~s" (dropped-links-count self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span-links))
  (cl:setf (cl:slot-value self 'dropped-links-count) 0)
  (cl:setf (cl:slot-value self 'link)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span-link
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span-links))
  cl:t)

(cl:defmethod pb:octet-size ((self span-links))
  (cl:let ((size 0))
    ;; int32 dropped_links_count = 2[json_name = "droppedLinksCount"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-links-count))))))
    ;; repeated .opencensus.proto.trace.v1.Span.Link link = 1[json_name = "link"];
    (cl:let* ((v (cl:slot-value self 'link))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span-links) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; repeated .opencensus.proto.trace.v1.Span.Link link = 1[json_name = "link"];
  (cl:let* ((v (cl:slot-value self 'link))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; int32 dropped_links_count = 2[json_name = "droppedLinksCount"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-links-count)))))
  index)

(cl:defmethod pb:merge-from-array ((self span-links) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; repeated .opencensus.proto.trace.v1.Span.Link link = 1[json_name = "link"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'opencensus.proto.trace.v1::span-link)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'link)))))
        ;; int32 dropped_links_count = 2[json_name = "droppedLinksCount"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'dropped-links-count) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span-links) (from span-links))
  (cl:let* ((v (cl:slot-value self 'link))
            (vf (cl:slot-value from 'link))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'dropped-links-count) (cl:slot-value from 'dropped-links-count))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)



(cl:defmethod cl:print-object ((self span) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_trace-id: ~s" (trace-id self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_span-id: ~s" (span-id self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_tracestate: ~s" (tracestate self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_parent-span-id: ~s" (parent-span-id self)))
      (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_name: ~s" (name self)))
      (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_kind: ~s" (kind self)))
      (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_start-time: ~s" (start-time self)))
      (cl:when (cl:logbitp 7 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_end-time: ~s" (end-time self)))
      (cl:when (cl:logbitp 8 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_attributes: ~s" (attributes self)))
      (cl:when (cl:logbitp 9 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_stack-trace: ~s" (stack-trace self)))
      (cl:when (cl:logbitp 10 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_time-events: ~s" (time-events self)))
      (cl:when (cl:logbitp 11 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_links: ~s" (links self)))
      (cl:when (cl:logbitp 12 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_status: ~s" (status self)))
      (cl:when (cl:logbitp 13 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_resource: ~s" (resource self)))
      (cl:when (cl:logbitp 14 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_same-process-as-parent-span: ~s" (same-process-as-parent-span self)))
      (cl:when (cl:logbitp 15 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_child-span-count: ~s" (child-span-count self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self span))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'trace-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8))))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'span-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8))))
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'tracestate) cl:nil))
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'parent-span-id) (cl:make-array 0 :element-type '(cl:unsigned-byte 8))))
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'name) cl:nil))
  (cl:setf (cl:slot-value self 'kind) opencensus.proto.trace.v1::+span-span-kind-span-kind-unspecified+)
  (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'start-time) cl:nil))
  (cl:when (cl:logbitp 7 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'end-time) cl:nil))
  (cl:when (cl:logbitp 8 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'attributes) cl:nil))
  (cl:when (cl:logbitp 9 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'stack-trace) cl:nil))
  (cl:when (cl:logbitp 10 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'time-events) cl:nil))
  (cl:when (cl:logbitp 11 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'links) cl:nil))
  (cl:when (cl:logbitp 12 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'status) cl:nil))
  (cl:when (cl:logbitp 13 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'resource) cl:nil))
  (cl:when (cl:logbitp 14 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'same-process-as-parent-span) cl:nil))
  (cl:when (cl:logbitp 15 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'child-span-count) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self span))
  cl:t)

(cl:defmethod pb:octet-size ((self span))
  (cl:let ((size 0))
    ;; bytes trace_id = 1[json_name = "traceId"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (cl:length (cl:slot-value self 'trace-id))))
        (cl:+ s (varint:length32 s)))))
    ;; bytes span_id = 2[json_name = "spanId"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (cl:length (cl:slot-value self 'span-id))))
        (cl:+ s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15[json_name = "tracestate"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'tracestate))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; bytes parent_span_id = 3[json_name = "parentSpanId"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (cl:length (cl:slot-value self 'parent-span-id))))
        (cl:+ s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.TruncatableString name = 4[json_name = "name"];
    (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'name))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.SpanKind kind = 14[json_name = "kind"];
    (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'kind)))))
    ;; .google.protobuf.Timestamp start_time = 5[json_name = "startTime"];
    (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'start-time))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .google.protobuf.Timestamp end_time = 6[json_name = "endTime"];
    (cl:when (cl:logbitp 7 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'end-time))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 7[json_name = "attributes"];
    (cl:when (cl:logbitp 8 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'attributes))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.StackTrace stack_trace = 8[json_name = "stackTrace"];
    (cl:when (cl:logbitp 9 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'stack-trace))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9[json_name = "timeEvents"];
    (cl:when (cl:logbitp 10 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'time-events))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Span.Links links = 10[json_name = "links"];
    (cl:when (cl:logbitp 11 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'links))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.Status status = 11[json_name = "status"];
    (cl:when (cl:logbitp 12 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'status))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.resource.v1.Resource resource = 16[json_name = "resource"];
    (cl:when (cl:logbitp 13 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'resource))))
        (cl:incf size (cl:+ 2 s (varint:length32 s)))))
    ;; .google.protobuf.BoolValue same_process_as_parent_span = 12[json_name = "sameProcessAsParentSpan"];
    (cl:when (cl:logbitp 14 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'same-process-as-parent-span))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .google.protobuf.UInt32Value child_span_count = 13[json_name = "childSpanCount"];
    (cl:when (cl:logbitp 15 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'child-span-count))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self span) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; bytes trace_id = 1[json_name = "traceId"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value self 'trace-id))))
  ;; bytes span_id = 2[json_name = "spanId"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value self 'span-id))))
  ;; bytes parent_span_id = 3[json_name = "parentSpanId"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value self 'parent-span-id))))
  ;; .opencensus.proto.trace.v1.TruncatableString name = 4[json_name = "name"];
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 34))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'name) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'name) buffer index limit)))
  ;; .google.protobuf.Timestamp start_time = 5[json_name = "startTime"];
  (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 42))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'start-time) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'start-time) buffer index limit)))
  ;; .google.protobuf.Timestamp end_time = 6[json_name = "endTime"];
  (cl:when (cl:logbitp 7 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 50))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'end-time) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'end-time) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 7[json_name = "attributes"];
  (cl:when (cl:logbitp 8 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 58))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'attributes) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'attributes) buffer index limit)))
  ;; .opencensus.proto.trace.v1.StackTrace stack_trace = 8[json_name = "stackTrace"];
  (cl:when (cl:logbitp 9 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 66))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'stack-trace) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'stack-trace) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9[json_name = "timeEvents"];
  (cl:when (cl:logbitp 10 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 74))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'time-events) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'time-events) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Span.Links links = 10[json_name = "links"];
  (cl:when (cl:logbitp 11 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 82))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'links) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'links) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Status status = 11[json_name = "status"];
  (cl:when (cl:logbitp 12 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 90))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'status) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'status) buffer index limit)))
  ;; .google.protobuf.BoolValue same_process_as_parent_span = 12[json_name = "sameProcessAsParentSpan"];
  (cl:when (cl:logbitp 14 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 98))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'same-process-as-parent-span) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'same-process-as-parent-span) buffer index limit)))
  ;; .google.protobuf.UInt32Value child_span_count = 13[json_name = "childSpanCount"];
  (cl:when (cl:logbitp 15 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 106))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'child-span-count) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'child-span-count) buffer index limit)))
  ;; .opencensus.proto.trace.v1.Span.SpanKind kind = 14[json_name = "kind"];
  (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 112))
    (cl:setf index
     (varint:encode-uint64-carefully buffer index limit
      (cl:ldb (cl:byte 64 0) (cl:slot-value self 'kind)))))
  ;; .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15[json_name = "tracestate"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 122))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'tracestate) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'tracestate) buffer index limit)))
  ;; .opencensus.proto.resource.v1.Resource resource = 16[json_name = "resource"];
  (cl:when (cl:logbitp 13 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 130))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'resource) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'resource) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self span) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; bytes trace_id = 1[json_name = "traceId"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'trace-id) value)
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; bytes span_id = 2[json_name = "spanId"];
        ((18)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'span-id) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; bytes parent_span_id = 3[json_name = "parentSpanId"];
        ((26)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'parent-span-id) value)
            (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .opencensus.proto.trace.v1.TruncatableString name = 4[json_name = "name"];
        ((34)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'name)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'name) message)
                (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .google.protobuf.Timestamp start_time = 5[json_name = "startTime"];
        ((42)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'start-time)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::timestamp))
                (cl:setf (cl:slot-value self 'start-time) message)
                (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .google.protobuf.Timestamp end_time = 6[json_name = "endTime"];
        ((50)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'end-time)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::timestamp))
                (cl:setf (cl:slot-value self 'end-time) message)
                (cl:setf (cl:ldb (cl:byte 1 7) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Span.Attributes attributes = 7[json_name = "attributes"];
        ((58)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'attributes)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
                (cl:setf (cl:slot-value self 'attributes) message)
                (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.StackTrace stack_trace = 8[json_name = "stackTrace"];
        ((66)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'stack-trace)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::stack-trace))
                (cl:setf (cl:slot-value self 'stack-trace) message)
                (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Span.TimeEvents time_events = 9[json_name = "timeEvents"];
        ((74)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'time-events)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-time-events))
                (cl:setf (cl:slot-value self 'time-events) message)
                (cl:setf (cl:ldb (cl:byte 1 10) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Span.Links links = 10[json_name = "links"];
        ((82)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'links)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-links))
                (cl:setf (cl:slot-value self 'links) message)
                (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Status status = 11[json_name = "status"];
        ((90)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'status)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::status))
                (cl:setf (cl:slot-value self 'status) message)
                (cl:setf (cl:ldb (cl:byte 1 12) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .google.protobuf.BoolValue same_process_as_parent_span = 12[json_name = "sameProcessAsParentSpan"];
        ((98)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'same-process-as-parent-span)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::bool-value))
                (cl:setf (cl:slot-value self 'same-process-as-parent-span) message)
                (cl:setf (cl:ldb (cl:byte 1 14) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .google.protobuf.UInt32Value child_span_count = 13[json_name = "childSpanCount"];
        ((106)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'child-span-count)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'google.protobuf::uint32value))
                (cl:setf (cl:slot-value self 'child-span-count) message)
                (cl:setf (cl:ldb (cl:byte 1 15) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.Span.SpanKind kind = 14[json_name = "kind"];
        ((112)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            ;; XXXXX: when valid, set field, else add to unknown fields
            (cl:setf (cl:slot-value self 'kind) value)
            (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .opencensus.proto.trace.v1.Span.Tracestate tracestate = 15[json_name = "tracestate"];
        ((122)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'tracestate)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-tracestate))
                (cl:setf (cl:slot-value self 'tracestate) message)
                (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.resource.v1.Resource resource = 16[json_name = "resource"];
        ((130)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'resource)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.resource.v1::resource))
                (cl:setf (cl:slot-value self 'resource) message)
                (cl:setf (cl:ldb (cl:byte 1 13) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self span) (from span))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'trace-id) (cl:slot-value from 'trace-id))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'span-id) (cl:slot-value from 'span-id))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'tracestate)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-tracestate))
        (cl:setf (cl:slot-value self 'tracestate) message)
        (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'tracestate))))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'parent-span-id) (cl:slot-value from 'parent-span-id))
    (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 4 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'name)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'name) message)
        (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'name))))
  (cl:when (cl:logbitp 5 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'kind) (cl:slot-value from 'kind))
    (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 6 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'start-time)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::timestamp))
        (cl:setf (cl:slot-value self 'start-time) message)
        (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'start-time))))
  (cl:when (cl:logbitp 7 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'end-time)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::timestamp))
        (cl:setf (cl:slot-value self 'end-time) message)
        (cl:setf (cl:ldb (cl:byte 1 7) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'end-time))))
  (cl:when (cl:logbitp 8 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'attributes)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-attributes))
        (cl:setf (cl:slot-value self 'attributes) message)
        (cl:setf (cl:ldb (cl:byte 1 8) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'attributes))))
  (cl:when (cl:logbitp 9 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'stack-trace)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::stack-trace))
        (cl:setf (cl:slot-value self 'stack-trace) message)
        (cl:setf (cl:ldb (cl:byte 1 9) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'stack-trace))))
  (cl:when (cl:logbitp 10 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'time-events)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-time-events))
        (cl:setf (cl:slot-value self 'time-events) message)
        (cl:setf (cl:ldb (cl:byte 1 10) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'time-events))))
  (cl:when (cl:logbitp 11 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'links)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::span-links))
        (cl:setf (cl:slot-value self 'links) message)
        (cl:setf (cl:ldb (cl:byte 1 11) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'links))))
  (cl:when (cl:logbitp 12 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'status)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::status))
        (cl:setf (cl:slot-value self 'status) message)
        (cl:setf (cl:ldb (cl:byte 1 12) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'status))))
  (cl:when (cl:logbitp 13 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'resource)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.resource.v1::resource))
        (cl:setf (cl:slot-value self 'resource) message)
        (cl:setf (cl:ldb (cl:byte 1 13) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'resource))))
  (cl:when (cl:logbitp 14 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'same-process-as-parent-span)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::bool-value))
        (cl:setf (cl:slot-value self 'same-process-as-parent-span) message)
        (cl:setf (cl:ldb (cl:byte 1 14) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'same-process-as-parent-span))))
  (cl:when (cl:logbitp 15 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'child-span-count)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'google.protobuf::uint32value))
        (cl:setf (cl:slot-value self 'child-span-count) message)
        (cl:setf (cl:ldb (cl:byte 1 15) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'child-span-count))))
)


(cl:defclass status (pb:protocol-buffer)
  (
  (code
   :accessor code
   :initform 0
   :type (cl:signed-byte 32))
  (message
   :accessor message
   :initform (pb:string-field "")
   :type pb::%sf%)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'status)

(cl:export 'code)


(cl:defmethod (cl:setf code) :after (x (self status))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-code)
  (cl:defgeneric has-code (proto)))
(cl:defmethod has-code ((self status))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-code)

(cl:unless (cl:fboundp 'clear-code)
  (cl:defgeneric clear-code (proto)))
(cl:defmethod clear-code ((self status))
  (cl:setf (cl:slot-value self 'code) 0)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-code)

(cl:export 'message)


(cl:defmethod (cl:setf message) :after (x (self status))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-message)
  (cl:defgeneric has-message (proto)))
(cl:defmethod has-message ((self status))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-message)

(cl:unless (cl:fboundp 'clear-message)
  (cl:defgeneric clear-message (proto)))
(cl:defmethod clear-message ((self status))
  (cl:setf (cl:slot-value self 'message) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-message)


(cl:defmethod cl:print-object ((self status) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_code: ~s" (code self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_message: ~s" (message self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self status))
  (cl:setf (cl:slot-value self 'code) 0)
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'message) (pb:string-field "")))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self status))
  cl:t)

(cl:defmethod pb:octet-size ((self status))
  (cl:let ((size 0))
    ;; int32 code = 1[json_name = "code"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'code))))))
    ;; string message = 2[json_name = "message"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'message))))
        (cl:+ s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self status) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; int32 code = 1[json_name = "code"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 8))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'code)))))
  ;; string message = 2[json_name = "message"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'message) 'pb::%octets%))))
  index)

(cl:defmethod pb:merge-from-array ((self status) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; int32 code = 1[json_name = "code"];
        ((8)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'code) value)
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; string message = 2[json_name = "message"];
        ((18)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'message) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self status) (from status))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'code) (cl:slot-value from 'code))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'message) (cl:slot-value from 'message))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)


(cl:defclass attribute-value (pb:protocol-buffer)
  (
  (string-value
   :writer (cl:setf string-value)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (int-value
   :accessor int-value
   :initform 0
   :type (cl:signed-byte 64))
  (bool-value
   :accessor bool-value
   :initform cl:nil
   :type cl:boolean)
  (double-value
   :accessor double-value
   :initform 0d0
   :type cl:double-float)
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 4))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'attribute-value)

(cl:export 'string-value)

(cl:unless (cl:fboundp 'string-value)
  (cl:defgeneric string-value (proto)))
(cl:defmethod string-value ((self attribute-value))
  (cl:let ((result (cl:slot-value self 'string-value)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'string-value) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf string-value) :after (x (self attribute-value))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-string-value)
  (cl:defgeneric has-string-value (proto)))
(cl:defmethod has-string-value ((self attribute-value))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-string-value)

(cl:unless (cl:fboundp 'clear-string-value)
  (cl:defgeneric clear-string-value (proto)))
(cl:defmethod clear-string-value ((self attribute-value))
  (cl:setf (cl:slot-value self 'string-value) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-string-value)

(cl:export 'int-value)


(cl:defmethod (cl:setf int-value) :after (x (self attribute-value))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-int-value)
  (cl:defgeneric has-int-value (proto)))
(cl:defmethod has-int-value ((self attribute-value))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-int-value)

(cl:unless (cl:fboundp 'clear-int-value)
  (cl:defgeneric clear-int-value (proto)))
(cl:defmethod clear-int-value ((self attribute-value))
  (cl:setf (cl:slot-value self 'int-value) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-int-value)

(cl:export 'bool-value)


(cl:defmethod (cl:setf bool-value) :after (x (self attribute-value))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-bool-value)
  (cl:defgeneric has-bool-value (proto)))
(cl:defmethod has-bool-value ((self attribute-value))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-bool-value)

(cl:unless (cl:fboundp 'clear-bool-value)
  (cl:defgeneric clear-bool-value (proto)))
(cl:defmethod clear-bool-value ((self attribute-value))
  (cl:setf (cl:slot-value self 'bool-value) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-bool-value)

(cl:export 'double-value)


(cl:defmethod (cl:setf double-value) :after (x (self attribute-value))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-double-value)
  (cl:defgeneric has-double-value (proto)))
(cl:defmethod has-double-value ((self attribute-value))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-double-value)

(cl:unless (cl:fboundp 'clear-double-value)
  (cl:defgeneric clear-double-value (proto)))
(cl:defmethod clear-double-value ((self attribute-value))
  (cl:setf (cl:slot-value self 'double-value) 0d0)
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-double-value)


(cl:defmethod cl:print-object ((self attribute-value) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_string-value: ~s" (string-value self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_int-value: ~s" (int-value self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_bool-value: ~s" (bool-value self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_double-value: ~s" (double-value self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self attribute-value))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'string-value) cl:nil))
  (cl:setf (cl:slot-value self 'int-value) 0)
  (cl:setf (cl:slot-value self 'bool-value) cl:nil)
  (cl:setf (cl:slot-value self 'double-value) 0d0)
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self attribute-value))
  cl:t)

(cl:defmethod pb:octet-size ((self attribute-value))
  (cl:let ((size 0))
    ;; .opencensus.proto.trace.v1.TruncatableString string_value = 1[json_name = "stringValue"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'string-value))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; int64 int_value = 2[json_name = "intValue"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'int-value))))))
    ;; bool bool_value = 3[json_name = "boolValue"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 1)))
    ;; double double_value = 4[json_name = "doubleValue"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 8)))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self attribute-value) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.trace.v1.TruncatableString string_value = 1[json_name = "stringValue"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'string-value) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'string-value) buffer index limit)))
  ;; int64 int_value = 2[json_name = "intValue"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'int-value)))))
  ;; bool bool_value = 3[json_name = "boolValue"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 24))
    (cl:setf index (wire-format:write-boolean-carefully buffer index limit (cl:slot-value self 'bool-value))))
  ;; double double_value = 4[json_name = "doubleValue"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 33))
    (cl:setf index (wire-format:write-double-float-carefully buffer index limit (cl:slot-value self 'double-value))))
  index)

(cl:defmethod pb:merge-from-array ((self attribute-value) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.trace.v1.TruncatableString string_value = 1[json_name = "stringValue"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'string-value)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'string-value) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; int64 int_value = 2[json_name = "intValue"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'int-value) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; bool bool_value = 3[json_name = "boolValue"];
        ((24)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-boolean-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'bool-value) value)
            (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; double double_value = 4[json_name = "doubleValue"];
        ((33)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-double-float-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'double-value) value)
            (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self attribute-value) (from attribute-value))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'string-value)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'string-value) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'string-value))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'int-value) (cl:slot-value from 'int-value))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'bool-value) (cl:slot-value from 'bool-value))
    (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'double-value) (cl:slot-value from 'double-value))
    (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
)


(cl:defclass stack-trace-stack-frame (pb:protocol-buffer)
  (
  (function-name
   :writer (cl:setf function-name)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (original-function-name
   :writer (cl:setf original-function-name)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (file-name
   :writer (cl:setf file-name)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (line-number
   :accessor line-number
   :initform 0
   :type (cl:signed-byte 64))
  (column-number
   :accessor column-number
   :initform 0
   :type (cl:signed-byte 64))
  (load-module
   :writer (cl:setf load-module)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::module))
  (source-version
   :writer (cl:setf source-version)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 7))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'stack-trace-stack-frame)

(cl:export 'function-name)

(cl:unless (cl:fboundp 'function-name)
  (cl:defgeneric function-name (proto)))
(cl:defmethod function-name ((self stack-trace-stack-frame))
  (cl:let ((result (cl:slot-value self 'function-name)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'function-name) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf function-name) :after (x (self stack-trace-stack-frame))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-function-name)
  (cl:defgeneric has-function-name (proto)))
(cl:defmethod has-function-name ((self stack-trace-stack-frame))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-function-name)

(cl:unless (cl:fboundp 'clear-function-name)
  (cl:defgeneric clear-function-name (proto)))
(cl:defmethod clear-function-name ((self stack-trace-stack-frame))
  (cl:setf (cl:slot-value self 'function-name) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-function-name)

(cl:export 'original-function-name)

(cl:unless (cl:fboundp 'original-function-name)
  (cl:defgeneric original-function-name (proto)))
(cl:defmethod original-function-name ((self stack-trace-stack-frame))
  (cl:let ((result (cl:slot-value self 'original-function-name)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'original-function-name) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf original-function-name) :after (x (self stack-trace-stack-frame))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-original-function-name)
  (cl:defgeneric has-original-function-name (proto)))
(cl:defmethod has-original-function-name ((self stack-trace-stack-frame))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-original-function-name)

(cl:unless (cl:fboundp 'clear-original-function-name)
  (cl:defgeneric clear-original-function-name (proto)))
(cl:defmethod clear-original-function-name ((self stack-trace-stack-frame))
  (cl:setf (cl:slot-value self 'original-function-name) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-original-function-name)

(cl:export 'file-name)

(cl:unless (cl:fboundp 'file-name)
  (cl:defgeneric file-name (proto)))
(cl:defmethod file-name ((self stack-trace-stack-frame))
  (cl:let ((result (cl:slot-value self 'file-name)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'file-name) result))
      (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf file-name) :after (x (self stack-trace-stack-frame))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-file-name)
  (cl:defgeneric has-file-name (proto)))
(cl:defmethod has-file-name ((self stack-trace-stack-frame))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-file-name)

(cl:unless (cl:fboundp 'clear-file-name)
  (cl:defgeneric clear-file-name (proto)))
(cl:defmethod clear-file-name ((self stack-trace-stack-frame))
  (cl:setf (cl:slot-value self 'file-name) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-file-name)

(cl:export 'line-number)


(cl:defmethod (cl:setf line-number) :after (x (self stack-trace-stack-frame))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-line-number)
  (cl:defgeneric has-line-number (proto)))
(cl:defmethod has-line-number ((self stack-trace-stack-frame))
  (cl:logbitp 3 (cl:slot-value self '%has-bits%)))
(cl:export 'has-line-number)

(cl:unless (cl:fboundp 'clear-line-number)
  (cl:defgeneric clear-line-number (proto)))
(cl:defmethod clear-line-number ((self stack-trace-stack-frame))
  (cl:setf (cl:slot-value self 'line-number) 0)
  (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-line-number)

(cl:export 'column-number)


(cl:defmethod (cl:setf column-number) :after (x (self stack-trace-stack-frame))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-column-number)
  (cl:defgeneric has-column-number (proto)))
(cl:defmethod has-column-number ((self stack-trace-stack-frame))
  (cl:logbitp 4 (cl:slot-value self '%has-bits%)))
(cl:export 'has-column-number)

(cl:unless (cl:fboundp 'clear-column-number)
  (cl:defgeneric clear-column-number (proto)))
(cl:defmethod clear-column-number ((self stack-trace-stack-frame))
  (cl:setf (cl:slot-value self 'column-number) 0)
  (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-column-number)

(cl:export 'load-module)

(cl:unless (cl:fboundp 'load-module)
  (cl:defgeneric load-module (proto)))
(cl:defmethod load-module ((self stack-trace-stack-frame))
  (cl:let ((result (cl:slot-value self 'load-module)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::module))
      (cl:setf (cl:slot-value self 'load-module) result))
      (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf load-module) :after (x (self stack-trace-stack-frame))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-load-module)
  (cl:defgeneric has-load-module (proto)))
(cl:defmethod has-load-module ((self stack-trace-stack-frame))
  (cl:logbitp 5 (cl:slot-value self '%has-bits%)))
(cl:export 'has-load-module)

(cl:unless (cl:fboundp 'clear-load-module)
  (cl:defgeneric clear-load-module (proto)))
(cl:defmethod clear-load-module ((self stack-trace-stack-frame))
  (cl:setf (cl:slot-value self 'load-module) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-load-module)

(cl:export 'source-version)

(cl:unless (cl:fboundp 'source-version)
  (cl:defgeneric source-version (proto)))
(cl:defmethod source-version ((self stack-trace-stack-frame))
  (cl:let ((result (cl:slot-value self 'source-version)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'source-version) result))
      (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf source-version) :after (x (self stack-trace-stack-frame))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-source-version)
  (cl:defgeneric has-source-version (proto)))
(cl:defmethod has-source-version ((self stack-trace-stack-frame))
  (cl:logbitp 6 (cl:slot-value self '%has-bits%)))
(cl:export 'has-source-version)

(cl:unless (cl:fboundp 'clear-source-version)
  (cl:defgeneric clear-source-version (proto)))
(cl:defmethod clear-source-version ((self stack-trace-stack-frame))
  (cl:setf (cl:slot-value self 'source-version) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-source-version)



(cl:defclass stack-trace-stack-frames (pb:protocol-buffer)
  (
  (frame
   :accessor frame
   :initform (cl:make-array
              0
              :element-type 'opencensus.proto.trace.v1::stack-trace-stack-frame
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector opencensus.proto.trace.v1::stack-trace-stack-frame))
  (dropped-frames-count
   :accessor dropped-frames-count
   :initform 0
   :type (cl:signed-byte 32))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'stack-trace-stack-frames)

(cl:export 'frame)

(cl:unless (cl:fboundp 'clear-frame)
  (cl:defgeneric clear-frame (proto)))
(cl:defmethod clear-frame ((self stack-trace-stack-frames))
  (cl:setf (cl:slot-value self 'frame)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::stack-trace-stack-frame
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-frame)

(cl:export 'dropped-frames-count)


(cl:defmethod (cl:setf dropped-frames-count) :after (x (self stack-trace-stack-frames))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-dropped-frames-count)
  (cl:defgeneric has-dropped-frames-count (proto)))
(cl:defmethod has-dropped-frames-count ((self stack-trace-stack-frames))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-dropped-frames-count)

(cl:unless (cl:fboundp 'clear-dropped-frames-count)
  (cl:defgeneric clear-dropped-frames-count (proto)))
(cl:defmethod clear-dropped-frames-count ((self stack-trace-stack-frames))
  (cl:setf (cl:slot-value self 'dropped-frames-count) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-dropped-frames-count)



(cl:defclass stack-trace (pb:protocol-buffer)
  (
  (stack-frames
   :writer (cl:setf stack-frames)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::stack-trace-stack-frames))
  (stack-trace-hash-id
   :accessor stack-trace-hash-id
   :initform 0
   :type (cl:unsigned-byte 64))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'stack-trace)

(cl:export 'stack-frames)

(cl:unless (cl:fboundp 'stack-frames)
  (cl:defgeneric stack-frames (proto)))
(cl:defmethod stack-frames ((self stack-trace))
  (cl:let ((result (cl:slot-value self 'stack-frames)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::stack-trace-stack-frames))
      (cl:setf (cl:slot-value self 'stack-frames) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf stack-frames) :after (x (self stack-trace))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-stack-frames)
  (cl:defgeneric has-stack-frames (proto)))
(cl:defmethod has-stack-frames ((self stack-trace))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-stack-frames)

(cl:unless (cl:fboundp 'clear-stack-frames)
  (cl:defgeneric clear-stack-frames (proto)))
(cl:defmethod clear-stack-frames ((self stack-trace))
  (cl:setf (cl:slot-value self 'stack-frames) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-stack-frames)

(cl:export 'stack-trace-hash-id)


(cl:defmethod (cl:setf stack-trace-hash-id) :after (x (self stack-trace))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-stack-trace-hash-id)
  (cl:defgeneric has-stack-trace-hash-id (proto)))
(cl:defmethod has-stack-trace-hash-id ((self stack-trace))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-stack-trace-hash-id)

(cl:unless (cl:fboundp 'clear-stack-trace-hash-id)
  (cl:defgeneric clear-stack-trace-hash-id (proto)))
(cl:defmethod clear-stack-trace-hash-id ((self stack-trace))
  (cl:setf (cl:slot-value self 'stack-trace-hash-id) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-stack-trace-hash-id)


(cl:defmethod cl:print-object ((self stack-trace-stack-frame) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_function-name: ~s" (function-name self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_original-function-name: ~s" (original-function-name self)))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_file-name: ~s" (file-name self)))
      (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_line-number: ~s" (line-number self)))
      (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_column-number: ~s" (column-number self)))
      (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_load-module: ~s" (load-module self)))
      (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_source-version: ~s" (source-version self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self stack-trace-stack-frame))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'function-name) cl:nil))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'original-function-name) cl:nil))
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'file-name) cl:nil))
  (cl:setf (cl:slot-value self 'line-number) 0)
  (cl:setf (cl:slot-value self 'column-number) 0)
  (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'load-module) cl:nil))
  (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'source-version) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self stack-trace-stack-frame))
  cl:t)

(cl:defmethod pb:octet-size ((self stack-trace-stack-frame))
  (cl:let ((size 0))
    ;; .opencensus.proto.trace.v1.TruncatableString function_name = 1[json_name = "functionName"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'function-name))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.TruncatableString original_function_name = 2[json_name = "originalFunctionName"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'original-function-name))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.TruncatableString file_name = 3[json_name = "fileName"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'file-name))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; int64 line_number = 4[json_name = "lineNumber"];
    (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'line-number))))))
    ;; int64 column_number = 5[json_name = "columnNumber"];
    (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'column-number))))))
    ;; .opencensus.proto.trace.v1.Module load_module = 6[json_name = "loadModule"];
    (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'load-module))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.TruncatableString source_version = 7[json_name = "sourceVersion"];
    (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'source-version))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self stack-trace-stack-frame) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.trace.v1.TruncatableString function_name = 1[json_name = "functionName"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'function-name) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'function-name) buffer index limit)))
  ;; .opencensus.proto.trace.v1.TruncatableString original_function_name = 2[json_name = "originalFunctionName"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'original-function-name) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'original-function-name) buffer index limit)))
  ;; .opencensus.proto.trace.v1.TruncatableString file_name = 3[json_name = "fileName"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'file-name) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'file-name) buffer index limit)))
  ;; int64 line_number = 4[json_name = "lineNumber"];
  (cl:when (cl:logbitp 3 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 32))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'line-number)))))
  ;; int64 column_number = 5[json_name = "columnNumber"];
  (cl:when (cl:logbitp 4 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 40))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'column-number)))))
  ;; .opencensus.proto.trace.v1.Module load_module = 6[json_name = "loadModule"];
  (cl:when (cl:logbitp 5 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 50))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'load-module) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'load-module) buffer index limit)))
  ;; .opencensus.proto.trace.v1.TruncatableString source_version = 7[json_name = "sourceVersion"];
  (cl:when (cl:logbitp 6 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 58))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'source-version) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'source-version) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self stack-trace-stack-frame) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.trace.v1.TruncatableString function_name = 1[json_name = "functionName"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'function-name)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'function-name) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.TruncatableString original_function_name = 2[json_name = "originalFunctionName"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'original-function-name)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'original-function-name) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.TruncatableString file_name = 3[json_name = "fileName"];
        ((26)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'file-name)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'file-name) message)
                (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; int64 line_number = 4[json_name = "lineNumber"];
        ((32)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'line-number) value)
            (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; int64 column_number = 5[json_name = "columnNumber"];
        ((40)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'column-number) value)
            (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; .opencensus.proto.trace.v1.Module load_module = 6[json_name = "loadModule"];
        ((50)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'load-module)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::module))
                (cl:setf (cl:slot-value self 'load-module) message)
                (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.TruncatableString source_version = 7[json_name = "sourceVersion"];
        ((58)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'source-version)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'source-version) message)
                (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self stack-trace-stack-frame) (from stack-trace-stack-frame))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'function-name)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'function-name) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'function-name))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'original-function-name)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'original-function-name) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'original-function-name))))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'file-name)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'file-name) message)
        (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'file-name))))
  (cl:when (cl:logbitp 3 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'line-number) (cl:slot-value from 'line-number))
    (cl:setf (cl:ldb (cl:byte 1 3) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 4 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'column-number) (cl:slot-value from 'column-number))
    (cl:setf (cl:ldb (cl:byte 1 4) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 5 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'load-module)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::module))
        (cl:setf (cl:slot-value self 'load-module) message)
        (cl:setf (cl:ldb (cl:byte 1 5) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'load-module))))
  (cl:when (cl:logbitp 6 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'source-version)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'source-version) message)
        (cl:setf (cl:ldb (cl:byte 1 6) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'source-version))))
)



(cl:defmethod cl:print-object ((self stack-trace-stack-frames) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:format stream " ~_frame: ~s" (frame self))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_dropped-frames-count: ~s" (dropped-frames-count self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self stack-trace-stack-frames))
  (cl:setf (cl:slot-value self 'dropped-frames-count) 0)
  (cl:setf (cl:slot-value self 'frame)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::stack-trace-stack-frame
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self stack-trace-stack-frames))
  cl:t)

(cl:defmethod pb:octet-size ((self stack-trace-stack-frames))
  (cl:let ((size 0))
    ;; int32 dropped_frames_count = 2[json_name = "droppedFramesCount"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-frames-count))))))
    ;; repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1[json_name = "frame"];
    (cl:let* ((v (cl:slot-value self 'frame))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self stack-trace-stack-frames) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1[json_name = "frame"];
  (cl:let* ((v (cl:slot-value self 'frame))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; int32 dropped_frames_count = 2[json_name = "droppedFramesCount"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'dropped-frames-count)))))
  index)

(cl:defmethod pb:merge-from-array ((self stack-trace-stack-frames) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1[json_name = "frame"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'opencensus.proto.trace.v1::stack-trace-stack-frame)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'frame)))))
        ;; int32 dropped_frames_count = 2[json_name = "droppedFramesCount"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'dropped-frames-count) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self stack-trace-stack-frames) (from stack-trace-stack-frames))
  (cl:let* ((v (cl:slot-value self 'frame))
            (vf (cl:slot-value from 'frame))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'dropped-frames-count) (cl:slot-value from 'dropped-frames-count))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)



(cl:defmethod cl:print-object ((self stack-trace) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_stack-frames: ~s" (stack-frames self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_stack-trace-hash-id: ~s" (stack-trace-hash-id self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self stack-trace))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'stack-frames) cl:nil))
  (cl:setf (cl:slot-value self 'stack-trace-hash-id) 0)
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self stack-trace))
  cl:t)

(cl:defmethod pb:octet-size ((self stack-trace))
  (cl:let ((size 0))
    ;; .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1[json_name = "stackFrames"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'stack-frames))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; uint64 stack_trace_hash_id = 2[json_name = "stackTraceHashId"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:slot-value self 'stack-trace-hash-id)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self stack-trace) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1[json_name = "stackFrames"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'stack-frames) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'stack-frames) buffer index limit)))
  ;; uint64 stack_trace_hash_id = 2[json_name = "stackTraceHashId"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:slot-value self 'stack-trace-hash-id))))
  index)

(cl:defmethod pb:merge-from-array ((self stack-trace) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1[json_name = "stackFrames"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'stack-frames)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::stack-trace-stack-frames))
                (cl:setf (cl:slot-value self 'stack-frames) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; uint64 stack_trace_hash_id = 2[json_name = "stackTraceHashId"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-uint64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'stack-trace-hash-id) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self stack-trace) (from stack-trace))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'stack-frames)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::stack-trace-stack-frames))
        (cl:setf (cl:slot-value self 'stack-frames) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'stack-frames))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'stack-trace-hash-id) (cl:slot-value from 'stack-trace-hash-id))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)


(cl:defclass module (pb:protocol-buffer)
  (
  (module
   :writer (cl:setf module)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (build-id
   :writer (cl:setf build-id)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::truncatable-string))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'module)

(cl:export 'module)

(cl:unless (cl:fboundp 'module)
  (cl:defgeneric module (proto)))
(cl:defmethod module ((self module))
  (cl:let ((result (cl:slot-value self 'module)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'module) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf module) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-module)
  (cl:defgeneric has-module (proto)))
(cl:defmethod has-module ((self module))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-module)

(cl:unless (cl:fboundp 'clear-module)
  (cl:defgeneric clear-module (proto)))
(cl:defmethod clear-module ((self module))
  (cl:setf (cl:slot-value self 'module) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-module)

(cl:export 'build-id)

(cl:unless (cl:fboundp 'build-id)
  (cl:defgeneric build-id (proto)))
(cl:defmethod build-id ((self module))
  (cl:let ((result (cl:slot-value self 'build-id)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
      (cl:setf (cl:slot-value self 'build-id) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf build-id) :after (x (self module))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-build-id)
  (cl:defgeneric has-build-id (proto)))
(cl:defmethod has-build-id ((self module))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-build-id)

(cl:unless (cl:fboundp 'clear-build-id)
  (cl:defgeneric clear-build-id (proto)))
(cl:defmethod clear-build-id ((self module))
  (cl:setf (cl:slot-value self 'build-id) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-build-id)


(cl:defmethod cl:print-object ((self module) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_module: ~s" (module self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_build-id: ~s" (build-id self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self module))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'module) cl:nil))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'build-id) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self module))
  cl:t)

(cl:defmethod pb:octet-size ((self module))
  (cl:let ((size 0))
    ;; .opencensus.proto.trace.v1.TruncatableString module = 1[json_name = "module"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'module))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.TruncatableString build_id = 2[json_name = "buildId"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'build-id))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self module) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.trace.v1.TruncatableString module = 1[json_name = "module"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'module) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'module) buffer index limit)))
  ;; .opencensus.proto.trace.v1.TruncatableString build_id = 2[json_name = "buildId"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'build-id) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'build-id) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self module) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.trace.v1.TruncatableString module = 1[json_name = "module"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'module)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'module) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.TruncatableString build_id = 2[json_name = "buildId"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'build-id)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
                (cl:setf (cl:slot-value self 'build-id) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self module) (from module))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'module)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'module) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'module))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'build-id)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::truncatable-string))
        (cl:setf (cl:slot-value self 'build-id) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'build-id))))
)


(cl:defclass truncatable-string (pb:protocol-buffer)
  (
  (value
   :accessor value
   :initform (pb:string-field "")
   :type pb::%sf%)
  (truncated-byte-count
   :accessor truncated-byte-count
   :initform 0
   :type (cl:signed-byte 32))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'truncatable-string)

(cl:export 'value)


(cl:defmethod (cl:setf value) :after (x (self truncatable-string))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-value)
  (cl:defgeneric has-value (proto)))
(cl:defmethod has-value ((self truncatable-string))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-value)

(cl:unless (cl:fboundp 'clear-value)
  (cl:defgeneric clear-value (proto)))
(cl:defmethod clear-value ((self truncatable-string))
  (cl:setf (cl:slot-value self 'value) (pb:string-field ""))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-value)

(cl:export 'truncated-byte-count)


(cl:defmethod (cl:setf truncated-byte-count) :after (x (self truncatable-string))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-truncated-byte-count)
  (cl:defgeneric has-truncated-byte-count (proto)))
(cl:defmethod has-truncated-byte-count ((self truncatable-string))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-truncated-byte-count)

(cl:unless (cl:fboundp 'clear-truncated-byte-count)
  (cl:defgeneric clear-truncated-byte-count (proto)))
(cl:defmethod clear-truncated-byte-count ((self truncatable-string))
  (cl:setf (cl:slot-value self 'truncated-byte-count) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-truncated-byte-count)


(cl:defmethod cl:print-object ((self truncatable-string) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_value: ~s" (value self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_truncated-byte-count: ~s" (truncated-byte-count self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self truncatable-string))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'value) (pb:string-field "")))
  (cl:setf (cl:slot-value self 'truncated-byte-count) 0)
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self truncatable-string))
  cl:t)

(cl:defmethod pb:octet-size ((self truncatable-string))
  (cl:let ((size 0))
    ;; string value = 1[json_name = "value"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size 1)
      (cl:incf size (cl:let ((s (pb::%utf8-string-length% (cl:slot-value self 'value))))
        (cl:+ s (varint:length32 s)))))
    ;; int32 truncated_byte_count = 2[json_name = "truncatedByteCount"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'truncated-byte-count))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self truncatable-string) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; string value = 1[json_name = "value"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (wire-format:write-octets-carefully buffer index limit (cl:slot-value (cl:slot-value self 'value) 'pb::%octets%))))
  ;; int32 truncated_byte_count = 2[json_name = "truncatedByteCount"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'truncated-byte-count)))))
  index)

(cl:defmethod pb:merge-from-array ((self truncatable-string) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; string value = 1[json_name = "value"];
        ((10)
          (cl:multiple-value-bind (value new-index)
              (wire-format:read-octets-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'value) (pb:string-field value))
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; int32 truncated_byte_count = 2[json_name = "truncatedByteCount"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'truncated-byte-count) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self truncatable-string) (from truncatable-string))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'value) (cl:slot-value from 'value))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'truncated-byte-count) (cl:slot-value from 'truncated-byte-count))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)


