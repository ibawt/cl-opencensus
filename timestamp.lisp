
;;;;    timestamp.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:google.protobuf)
    (make-package '#:google.protobuf :use nil)))
(in-package #:google.protobuf)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:defclass timestamp (pb:protocol-buffer)
  (
  (seconds
   :accessor seconds
   :initform 0
   :type (cl:signed-byte 64))
  (nanos
   :accessor nanos
   :initform 0
   :type (cl:signed-byte 32))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'timestamp)

(cl:export 'seconds)


(cl:defmethod (cl:setf seconds) :after (x (self timestamp))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-seconds)
  (cl:defgeneric has-seconds (proto)))
(cl:defmethod has-seconds ((self timestamp))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-seconds)

(cl:unless (cl:fboundp 'clear-seconds)
  (cl:defgeneric clear-seconds (proto)))
(cl:defmethod clear-seconds ((self timestamp))
  (cl:setf (cl:slot-value self 'seconds) 0)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-seconds)

(cl:export 'nanos)


(cl:defmethod (cl:setf nanos) :after (x (self timestamp))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-nanos)
  (cl:defgeneric has-nanos (proto)))
(cl:defmethod has-nanos ((self timestamp))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-nanos)

(cl:unless (cl:fboundp 'clear-nanos)
  (cl:defgeneric clear-nanos (proto)))
(cl:defmethod clear-nanos ((self timestamp))
  (cl:setf (cl:slot-value self 'nanos) 0)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-nanos)


(cl:defmethod cl:print-object ((self timestamp) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_seconds: ~s" (seconds self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_nanos: ~s" (nanos self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self timestamp))
  (cl:setf (cl:slot-value self 'seconds) 0)
  (cl:setf (cl:slot-value self 'nanos) 0)
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self timestamp))
  cl:t)

(cl:defmethod pb:octet-size ((self timestamp))
  (cl:let ((size 0))
    ;; int64 seconds = 1[json_name = "seconds"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'seconds))))))
    ;; int32 nanos = 2[json_name = "nanos"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:incf size
        (cl:+ 1 (varint:length64 (cl:ldb (cl:byte 64 0) (cl:slot-value self 'nanos))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self timestamp) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; int64 seconds = 1[json_name = "seconds"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 8))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'seconds)))))
  ;; int32 nanos = 2[json_name = "nanos"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 16))
    (cl:setf index (varint:encode-uint64-carefully buffer index limit (cl:ldb (cl:byte 64 0) (cl:slot-value self 'nanos)))))
  index)

(cl:defmethod pb:merge-from-array ((self timestamp) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; int64 seconds = 1[json_name = "seconds"];
        ((8)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int64-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'seconds) value)
            (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        ;; int32 nanos = 2[json_name = "nanos"];
        ((16)
          (cl:multiple-value-bind (value new-index)
              (varint:parse-int32-carefully buffer index limit)
            (cl:setf (cl:slot-value self 'nanos) value)
            (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
            (cl:setf index new-index)))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self timestamp) (from timestamp))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'seconds) (cl:slot-value from 'seconds))
    (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:setf (cl:slot-value self 'nanos) (cl:slot-value from 'nanos))
    (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
)


