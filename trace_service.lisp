
;;;;    opencensus/proto/agent/trace/v1/trace_service.lisp

;;; Generated by the protocol buffer compiler.  DO NOT EDIT!


(cl:in-package #:common-lisp-user)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (find-package '#:opencensus.proto.agent.trace.v1)
    (make-package '#:opencensus.proto.agent.trace.v1 :use nil)))
(in-package #:opencensus.proto.agent.trace.v1)
(cl:declaim #.com.google.base:*optimize-default*)

(cl:defclass current-library-config (pb:protocol-buffer)
  (
  (node
   :writer (cl:setf node)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.agent.common.v1::node))
  (config
   :writer (cl:setf config)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::trace-config))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'current-library-config)

(cl:export 'node)

(cl:unless (cl:fboundp 'node)
  (cl:defgeneric node (proto)))
(cl:defmethod node ((self current-library-config))
  (cl:let ((result (cl:slot-value self 'node)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.agent.common.v1::node))
      (cl:setf (cl:slot-value self 'node) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf node) :after (x (self current-library-config))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-node)
  (cl:defgeneric has-node (proto)))
(cl:defmethod has-node ((self current-library-config))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-node)

(cl:unless (cl:fboundp 'clear-node)
  (cl:defgeneric clear-node (proto)))
(cl:defmethod clear-node ((self current-library-config))
  (cl:setf (cl:slot-value self 'node) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-node)

(cl:export 'config)

(cl:unless (cl:fboundp 'config)
  (cl:defgeneric config (proto)))
(cl:defmethod config ((self current-library-config))
  (cl:let ((result (cl:slot-value self 'config)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::trace-config))
      (cl:setf (cl:slot-value self 'config) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf config) :after (x (self current-library-config))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-config)
  (cl:defgeneric has-config (proto)))
(cl:defmethod has-config ((self current-library-config))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-config)

(cl:unless (cl:fboundp 'clear-config)
  (cl:defgeneric clear-config (proto)))
(cl:defmethod clear-config ((self current-library-config))
  (cl:setf (cl:slot-value self 'config) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-config)


(cl:defmethod cl:print-object ((self current-library-config) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_node: ~s" (node self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_config: ~s" (config self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self current-library-config))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'node) cl:nil))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'config) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self current-library-config))
  cl:t)

(cl:defmethod pb:octet-size ((self current-library-config))
  (cl:let ((size 0))
    ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'node))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.TraceConfig config = 2[json_name = "config"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'config))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self current-library-config) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'node) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'node) buffer index limit)))
  ;; .opencensus.proto.trace.v1.TraceConfig config = 2[json_name = "config"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'config) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'config) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self current-library-config) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'node)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::node))
                (cl:setf (cl:slot-value self 'node) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.TraceConfig config = 2[json_name = "config"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'config)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::trace-config))
                (cl:setf (cl:slot-value self 'config) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self current-library-config) (from current-library-config))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'node)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::node))
        (cl:setf (cl:slot-value self 'node) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'node))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'config)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::trace-config))
        (cl:setf (cl:slot-value self 'config) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'config))))
)


(cl:defclass updated-library-config (pb:protocol-buffer)
  (
  (node
   :writer (cl:setf node)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.agent.common.v1::node))
  (config
   :writer (cl:setf config)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.trace.v1::trace-config))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 2))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'updated-library-config)

(cl:export 'node)

(cl:unless (cl:fboundp 'node)
  (cl:defgeneric node (proto)))
(cl:defmethod node ((self updated-library-config))
  (cl:let ((result (cl:slot-value self 'node)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.agent.common.v1::node))
      (cl:setf (cl:slot-value self 'node) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf node) :after (x (self updated-library-config))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-node)
  (cl:defgeneric has-node (proto)))
(cl:defmethod has-node ((self updated-library-config))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-node)

(cl:unless (cl:fboundp 'clear-node)
  (cl:defgeneric clear-node (proto)))
(cl:defmethod clear-node ((self updated-library-config))
  (cl:setf (cl:slot-value self 'node) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-node)

(cl:export 'config)

(cl:unless (cl:fboundp 'config)
  (cl:defgeneric config (proto)))
(cl:defmethod config ((self updated-library-config))
  (cl:let ((result (cl:slot-value self 'config)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.trace.v1::trace-config))
      (cl:setf (cl:slot-value self 'config) result))
      (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf config) :after (x (self updated-library-config))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-config)
  (cl:defgeneric has-config (proto)))
(cl:defmethod has-config ((self updated-library-config))
  (cl:logbitp 1 (cl:slot-value self '%has-bits%)))
(cl:export 'has-config)

(cl:unless (cl:fboundp 'clear-config)
  (cl:defgeneric clear-config (proto)))
(cl:defmethod clear-config ((self updated-library-config))
  (cl:setf (cl:slot-value self 'config) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-config)


(cl:defmethod cl:print-object ((self updated-library-config) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_node: ~s" (node self)))
      (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_config: ~s" (config self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self updated-library-config))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'node) cl:nil))
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'config) cl:nil))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self updated-library-config))
  cl:t)

(cl:defmethod pb:octet-size ((self updated-library-config))
  (cl:let ((size 0))
    ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'node))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.trace.v1.TraceConfig config = 2[json_name = "config"];
    (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'config))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self updated-library-config) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'node) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'node) buffer index limit)))
  ;; .opencensus.proto.trace.v1.TraceConfig config = 2[json_name = "config"];
  (cl:when (cl:logbitp 1 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'config) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'config) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self updated-library-config) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'node)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::node))
                (cl:setf (cl:slot-value self 'node) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; .opencensus.proto.trace.v1.TraceConfig config = 2[json_name = "config"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'config)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::trace-config))
                (cl:setf (cl:slot-value self 'config) message)
                (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self updated-library-config) (from updated-library-config))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'node)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::node))
        (cl:setf (cl:slot-value self 'node) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'node))))
  (cl:when (cl:logbitp 1 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'config)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.trace.v1::trace-config))
        (cl:setf (cl:slot-value self 'config) message)
        (cl:setf (cl:ldb (cl:byte 1 1) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'config))))
)


(cl:defclass export-trace-service-request (pb:protocol-buffer)
  (
  (node
   :writer (cl:setf node)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.agent.common.v1::node))
  (spans
   :accessor spans
   :initform (cl:make-array
              0
              :element-type 'opencensus.proto.trace.v1::span
              :fill-pointer 0 :adjustable cl:t)
   :type (cl:vector opencensus.proto.trace.v1::span))
  (resource
   :writer (cl:setf resource)
   :initform cl:nil
   :type (cl:or cl:null opencensus.proto.resource.v1::resource))
  (%has-bits%
   :accessor %has-bits%
   :initform 0
   :type (cl:unsigned-byte 3))
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'export-trace-service-request)

(cl:export 'node)

(cl:unless (cl:fboundp 'node)
  (cl:defgeneric node (proto)))
(cl:defmethod node ((self export-trace-service-request))
  (cl:let ((result (cl:slot-value self 'node)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.agent.common.v1::node))
      (cl:setf (cl:slot-value self 'node) result))
      (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf node) :after (x (self export-trace-service-request))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-node)
  (cl:defgeneric has-node (proto)))
(cl:defmethod has-node ((self export-trace-service-request))
  (cl:logbitp 0 (cl:slot-value self '%has-bits%)))
(cl:export 'has-node)

(cl:unless (cl:fboundp 'clear-node)
  (cl:defgeneric clear-node (proto)))
(cl:defmethod clear-node ((self export-trace-service-request))
  (cl:setf (cl:slot-value self 'node) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-node)

(cl:export 'spans)

(cl:unless (cl:fboundp 'clear-spans)
  (cl:defgeneric clear-spans (proto)))
(cl:defmethod clear-spans ((self export-trace-service-request))
  (cl:setf (cl:slot-value self 'spans)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span
            :fill-pointer 0 :adjustable cl:t))
  (cl:values))
(cl:export 'clear-spans)

(cl:export 'resource)

(cl:unless (cl:fboundp 'resource)
  (cl:defgeneric resource (proto)))
(cl:defmethod resource ((self export-trace-service-request))
  (cl:let ((result (cl:slot-value self 'resource)))
    (cl:when (cl:null result)
      (cl:setf result (cl:make-instance 'opencensus.proto.resource.v1::resource))
      (cl:setf (cl:slot-value self 'resource) result))
      (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1)
    result))

(cl:defmethod (cl:setf resource) :after (x (self export-trace-service-request))
  (cl:declare (cl:ignore x))
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))

(cl:unless (cl:fboundp 'has-resource)
  (cl:defgeneric has-resource (proto)))
(cl:defmethod has-resource ((self export-trace-service-request))
  (cl:logbitp 2 (cl:slot-value self '%has-bits%)))
(cl:export 'has-resource)

(cl:unless (cl:fboundp 'clear-resource)
  (cl:defgeneric clear-resource (proto)))
(cl:defmethod clear-resource ((self export-trace-service-request))
  (cl:setf (cl:slot-value self 'resource) cl:nil)
  (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 0)
  (cl:values))
(cl:export 'clear-resource)


(cl:defmethod cl:print-object ((self export-trace-service-request) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_node: ~s" (node self)))
      (cl:format stream " ~_spans: ~s" (spans self))
      (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
        (cl:format stream " ~_resource: ~s" (resource self)))
      ))
  (cl:values))

(cl:defmethod pb:clear ((self export-trace-service-request))
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'node) cl:nil))
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf (cl:slot-value self 'resource) cl:nil))
  (cl:setf (cl:slot-value self 'spans)
           (cl:make-array 0 :element-type 'opencensus.proto.trace.v1::span
            :fill-pointer 0 :adjustable cl:t))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self export-trace-service-request))
  cl:t)

(cl:defmethod pb:octet-size ((self export-trace-service-request))
  (cl:let ((size 0))
    ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
    (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'node))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; .opencensus.proto.resource.v1.Resource resource = 3[json_name = "resource"];
    (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
      (cl:let ((s (pb:octet-size (cl:slot-value self 'resource))))
        (cl:incf size (cl:+ 1 s (varint:length32 s)))))
    ;; repeated .opencensus.proto.trace.v1.Span spans = 2[json_name = "spans"];
    (cl:let* ((v (cl:slot-value self 'spans))
              (length (cl:length v)))
      (cl:incf size (cl:* 1 length))
      (cl:dotimes (i length)
        (cl:let ((s (pb:octet-size (cl:aref v i))))
          (cl:incf size (cl:+ s (varint:length32 s))))))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self export-trace-service-request) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
  (cl:when (cl:logbitp 0 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 10))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'node) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'node) buffer index limit)))
  ;; repeated .opencensus.proto.trace.v1.Span spans = 2[json_name = "spans"];
  (cl:let* ((v (cl:slot-value self 'spans))
            (length (cl:length v)))
    (cl:loop for i from 0 below length do
       (cl:setf index (varint:encode-uint32-carefully buffer index limit 18))
       (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:aref v i) 'pb::%cached-size%)))
       (cl:setf index (pb:serialize (cl:aref v i) buffer index limit))))
  ;; .opencensus.proto.resource.v1.Resource resource = 3[json_name = "resource"];
  (cl:when (cl:logbitp 2 (cl:slot-value self '%has-bits%))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit 26))
    (cl:setf index (varint:encode-uint32-carefully buffer index limit (cl:slot-value (cl:slot-value self 'resource) 'pb::%cached-size%)))
    (cl:setf index (pb:serialize (cl:slot-value self 'resource) buffer index limit)))
  index)

(cl:defmethod pb:merge-from-array ((self export-trace-service-request) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        ;; .opencensus.proto.agent.common.v1.Node node = 1[json_name = "node"];
        ((10)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'node)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::node))
                (cl:setf (cl:slot-value self 'node) message)
                (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        ;; repeated .opencensus.proto.trace.v1.Span spans = 2[json_name = "spans"];
        ((18)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:make-instance 'opencensus.proto.trace.v1::span)))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow"))
              (cl:vector-push-extend message (cl:slot-value self 'spans)))))
        ;; .opencensus.proto.resource.v1.Resource resource = 3[json_name = "resource"];
        ((26)
          (cl:multiple-value-bind (length new-index)
              (varint:parse-uint31-carefully buffer index limit)
            (cl:when (cl:> (cl:+ new-index length) limit)
              (cl:error "buffer overflow"))
            (cl:let ((message (cl:slot-value self 'resource)))
              (cl:when (cl:null message)
                (cl:setf message (cl:make-instance 'opencensus.proto.resource.v1::resource))
                (cl:setf (cl:slot-value self 'resource) message)
                (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
              (cl:setf index (pb:merge-from-array message buffer new-index (cl:+ new-index length)))
              (cl:when (cl:not (cl:= index (cl:+ new-index length)))
                (cl:error "buffer overflow")))))
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self export-trace-service-request) (from export-trace-service-request))
  (cl:let* ((v (cl:slot-value self 'spans))
            (vf (cl:slot-value from 'spans))
            (length (cl:length vf)))
    (cl:loop for i from 0 below length do
      (cl:vector-push-extend (cl:aref vf i) v)))
  (cl:when (cl:logbitp 0 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'node)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.agent.common.v1::node))
        (cl:setf (cl:slot-value self 'node) message)
        (cl:setf (cl:ldb (cl:byte 1 0) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'node))))
  (cl:when (cl:logbitp 2 (cl:slot-value from '%has-bits%))
    (cl:let ((message (cl:slot-value self 'resource)))
      (cl:when (cl:null message)
        (cl:setf message (cl:make-instance 'opencensus.proto.resource.v1::resource))
        (cl:setf (cl:slot-value self 'resource) message)
        (cl:setf (cl:ldb (cl:byte 1 2) (cl:slot-value self '%has-bits%)) 1))
     (pb:merge-from-message message (cl:slot-value from 'resource))))
)


(cl:defclass export-trace-service-response (pb:protocol-buffer)
  (
  (pb::%cached-size%
   :initform 0
   :type (cl:integer 0 #.(cl:1- cl:array-dimension-limit)))
  ))

(cl:export 'export-trace-service-response)


(cl:defmethod cl:print-object ((self export-trace-service-response) stream)
  (cl:pprint-logical-block (stream cl:nil)
    (cl:print-unreadable-object (self stream :type cl:t :identity cl:t)
      ))
  (cl:values))

(cl:defmethod pb:clear ((self export-trace-service-response))
  (cl:setf (cl:slot-value self '%has-bits%) 0)
  (cl:values))

(cl:defmethod pb:is-initialized ((self export-trace-service-response))
  cl:t)

(cl:defmethod pb:octet-size ((self export-trace-service-response))
  (cl:let ((size 0))
    (cl:setf (cl:slot-value self 'pb::%cached-size%) size)
    size))

(cl:defmethod pb:serialize ((self export-trace-service-response) buffer index limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index index limit)
              (cl:ignorable buffer limit))
  index)

(cl:defmethod pb:merge-from-array ((self export-trace-service-response) buffer start limit)
  (cl:declare (cl:type com.google.base:octet-vector buffer)
              (cl:type com.google.base:vector-index start limit))
  (cl:do ((index start index))
      ((cl:>= index limit) index)
    (cl:declare (cl:type com.google.base:vector-index index))
    (cl:multiple-value-bind (tag new-index)
        (varint:parse-uint32-carefully buffer index limit)
      (cl:setf index new-index)
      (cl:case tag
        (cl:t
          (cl:when (cl:= (cl:logand tag 7) 4)
            (cl:return-from pb:merge-from-array index))
          (cl:setf index (wire-format:skip-field buffer index limit tag)))))))

(cl:defmethod pb:merge-from-message ((self export-trace-service-response) (from export-trace-service-response))
)


